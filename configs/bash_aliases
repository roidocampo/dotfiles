#!/bin/bash

###########################################################################
# ask for confirmation before deleting/overwriting
###########################################################################

alias rm='rm -i'
alias cp='cp -i'
alias mv='mv -i'

###########################################################################
# enable color support of ls and also add handy aliases
###########################################################################

if \ls -d --color -Chv / 1>/dev/null 2>&1; then

    # GNU ls

    export LS_COLORS="$(printf "%s:" \
        'rs=0'          'di=01;34'      'ln=01;36'     \
        'mh=00'         'pi=40;33'      'so=01;35'     \
        'do=01;35'      'bd=40;33;01'   'cd=40;33;01'  \
        'or=40;31;01'   'su=37;41'      'sg=30;43'     \
        'ca=30;41'      'tw=30;42'      'ow=30;42'     \
        'st=37;44'      'ex=01;32'      '*.tar=01;31'  \
        '*.tgz=01;31'   '*.arj=01;31'   '*.taz=01;31'  \
        '*.lzh=01;31'   '*.lzma=01;31'  '*.tlz=01;31'  \
        '*.txz=01;31'   '*.zip=01;31'   '*.z=01;31'    \
        '*.Z=01;31'     '*.dz=01;31'    '*.gz=01;31'   \
        '*.lz=01;31'    '*.xz=01;31'    '*.bz2=01;31'  \
        '*.bz=01;31'    '*.tbz=01;31'   '*.tbz2=01;31' \
        '*.tz=01;31'    '*.deb=01;31'   '*.rpm=01;31'  \
        '*.jar=01;31'   '*.war=01;31'   '*.ear=01;31'  \
        '*.sar=01;31'   '*.rar=01;31'   '*.ace=01;31'  \
        '*.zoo=01;31'   '*.cpio=01;31'  '*.7z=01;31'   \
        '*.rz=01;31'    '*.jpg=01;35'   '*.jpeg=01;35' \
        '*.gif=01;35'   '*.bmp=01;35'   '*.pbm=01;35'  \
        '*.pgm=01;35'   '*.ppm=01;35'   '*.tga=01;35'  \
        '*.xbm=01;35'   '*.xpm=01;35'   '*.tif=01;35'  \
        '*.tiff=01;35'  '*.png=01;35'   '*.svg=01;35'  \
        '*.svgz=01;35'  '*.mng=01;35'   '*.pcx=01;35'  \
        '*.mov=01;35'   '*.mpg=01;35'   '*.mpeg=01;35' \
        '*.m2v=01;35'   '*.mkv=01;35'   '*.webm=01;35' \
        '*.ogm=01;35'   '*.mp4=01;35'   '*.m4v=01;35'  \
        '*.mp4v=01;35'  '*.vob=01;35'   '*.qt=01;35'   \
        '*.nuv=01;35'   '*.wmv=01;35'   '*.asf=01;35'  \
        '*.rm=01;35'    '*.rmvb=01;35'  '*.flc=01;35'  \
        '*.avi=01;35'   '*.fli=01;35'   '*.flv=01;35'  \
        '*.gl=01;35'    '*.dl=01;35'    '*.xcf=01;35'  \
        '*.xwd=01;35'   '*.yuv=01;35'   '*.cgm=01;35'  \
        '*.emf=01;35'   '*.axv=01;35'   '*.anx=01;35'  \
        '*.ogv=01;35'   '*.ogx=01;35'   '*.aac=00;36'  \
        '*.au=00;36'    '*.flac=00;36'  '*.mid=00;36'  \
        '*.midi=00;36'  '*.mka=00;36'   '*.mp3=00;36'  \
        '*.mpc=00;36'   '*.ogg=00;36'   '*.ra=00;36'   \
        '*.wav=00;36'   '*.axa=00;36'   '*.oga=00;36'  \
        '*.spx=00;36'   '*.xspf=00;36'  )"

    ls_cmd='ls --color=auto --quoting-style=literal -Chv'

elif \ls -d -GCh / 1>/dev/null 2>&1; then

    # BSD ls

    export CLICOLOR=1
    export LSCOLORS=exgxfxdxcxegedabagacad
    ls_cmd='ls -GCh'

else

    # Weird ls

    ls_cmd='ls'

fi

function _ls_hidden_inner()
{
    local opts=$1
    shift

    if [ "$1" ]; then
        cd "$1"
    fi

    declare f p
    declare -a hidden_pats dir_files not_hidden_files
    #readarray -t hidden_pats < .hidden
    hidden_pats=("Icon?")
    if [ -r .hidden ]; then
        OIFS=$IFS
        IFS=$'\r\n' hidden_pats+=($(cat .hidden))
        IFS=$OIFS
    fi
    shopt -s nullglob
    dir_files=(*)
    shopt -u nullglob
    not_hidden_files=()

    for f in "${dir_files[@]}"; do
        for p in "${hidden_pats[@]}"; do
            [[ $f == $p ]] && continue 2
        done
        not_hidden_files+=("$f")
    done

    if [ ${#not_hidden_files[@]} -eq 0 ]; then
        $ls_cmd $opts
        return $?
    else
        $ls_cmd $opts -d -- "${not_hidden_files[@]}"
        return $?
    fi
}

function _ls_hidden()
{
    local opts=$1
    shift

    if [ $# -gt 1 -o \( $# -eq 1 -a ! -d "$1" \) ]; then
        $ls_cmd $opts "$@"
        return $?
    fi

    local dir_name=$1
    if [ -z "$dir_name" ]; then
        dir_name=$PWD
    fi

    if [ "$(basename "$dir_name")" = "Downloads" ]; then
        opts="$opts -Artc"
    fi

    # execute in subshell
    (
        _ls_hidden_inner "$opts" "$@"
        exit $?
    )
    return $?
}

alias ls="$ls_cmd"
alias l="_ls_hidden ''"
alias la="$ls_cmd -A"
alias ll="_ls_hidden -l"

###########################################################################
# tree
###########################################################################

function _sortarray() {
    declare -n array_ref=$1
    declare IFS=$'\n'
    readarray -t array_ref < <(
        echo -n "${array_ref[*]}" \
            | sort -Vf
    )
}

function _t_reset() {
    declare -g _t_show_all="false"
    declare -g _t_long="false"
    declare -g _t_natural_sort="false"
    declare -g _t_incomplete="false"

    declare -g -i _t_max_level=4
    declare -g -i _t_max_files=1000
    declare -g -i _t_num_files=0

    declare -g -a _t_roots=()
    declare -g -a _t_names=( "." )
    declare -g -a _t_prefixes=( "" )

    [ "$1" = "--keep-files" ] || \
        declare -g -a _t_files=( "." )
}

function _t_proc_args() {
    while [ "$#" -gt 0 ]; do
        if [ "${1:0:2}" = "--" ]; then
            case "${1:2}" in
                "depth")
                    (( _t_max_level=$2 )); shift ;;
                "max" | "max-files" | "limit" )
                    (( _t_max_files=$2 )); shift ;;
            esac
        elif [ "${1:0:1}" = "-" ]; then
            for (( i=1; i < ${#1}; i+=1 )); do
                case "${1:${i}:1}" in
                    "d") _t_max_level+=1 ;;
                    "D") _t_max_level+=-1 ;;
                    "a") _t_show_all="true" ;;
                    "l") _t_long="true" ;;
                    "v") [ "$_t_natural_sort" = "true" ] \
                        && _t_natural_sort="false" \
                        || _t_natural_sort="true" ;;
                esac
            done
        else
            _t_roots+=( "$1" )
        fi
        shift
    done
}

function _t_check_max_files() {
    if [[ _max_files > 0 && _t_num_files -ge _t_max_files ]]; then
        _t_incomplete="true"
        return 0
    else
        return 1
    fi
}

function _t_traverse() {
    declare directory="$1"
    declare dirname=${directory##*/}
    declare prefix="$2"
    declare level="$3"
    declare -a children
    declare child_count idx child nam pointer child_prefix

    if [ \( "$level" -gt "$_t_max_level" \) -o \( "$dirname" = "node_modules" \) ]; then
        return
    fi

    children=( "$directory"/* )

    [ "$_t_natural_sort" = "true" ] && _sortarray children

    child_count=${#children[@]}

    for idx in "${!children[@]}"; do 

        _t_check_max_files && break

        child=${children[$idx]}
        name=${child##*/}

        pointer="├── "
        child_prefix="│   "

        if [ $idx -eq $((child_count - 1)) ]; then
            pointer="└── "
            child_prefix="    "
        fi

        _t_files+=( "${child}" )
        _t_names+=( "${name}" )
        _t_prefixes+=( "${prefix}${pointer}" )
        _t_num_files+=1

        [ -d "$child" ] \
            && _t_traverse "$child" "${prefix}$child_prefix" $((level + 1))

    done
}

function _t_tree() {

    _t_reset
    _t_proc_args "$@"

    shopt -s nullglob
    shopt -s nocaseglob
    [ "$_t_show_all" = "true" ] && shopt -s dotglob

    declare IFS=$'\n'
    declare root i line aux namecol file prefix ame lsinfo lsname
    declare -a lines

    if [ "${#_t_roots[@]}" -eq 0 ]; then
        _t_roots=( * )
    fi

    [ "$_t_natural_sort" = "true" ] && _sortarray roots

    for root in "${_t_roots[@]}"; do
        _t_check_max_files && break
        _t_files+=( "$root" )
        _t_names+=( "$root" )
        _t_prefixes+=( "" )
        _t_num_files+=1
        _t_traverse "$root" "" "2"
    done

    set -f
    if [ "$_t_long" = "true" ]; then
        lines=( $(ls --color=always -lhdU -- "${_t_files[@]}") )
    else
        lines=( $(ls --color=always -1hdU -- "${_t_files[@]}") )
    fi
    set +f

    namecol=0

    for i in "${!lines[@]}"; do
        line="${lines[$i]}"
        if [ "$i" -eq "0" ]; then
            aux="${line%%$'\e'*}"
            namecol="${#aux}"
            continue
        fi
        file="${_t_files[$i]}"
        prefix="${_t_prefixes[$i]}"
        name="${_t_names[$i]}"
        lsinfo="${line:0:$namecol}"
        lsname="${line:$namecol}"
        printf \
            " %*s %s\e[38;5;19m│\e[0m " \
            "${#_t_num_files}" "$i" \
            "$lsinfo"
        #if [ "$namecol" -gt "0" ]; then
        #    lsinfo="${line:0:$((namecol-1))}"
        #    lsname="${line:$namecol}"
        #    #printf "\e[38;5;17m%${#_t_num_files}s\e[38;5;19m %s\e[0m │ " "$i" "$lsinfo"
        #    printf " %${#_t_num_files}s %s \e[38;5;19m│\e[0m " "$i" "$lsinfo"
        #else
        #    lsname="${line}"
        #    #printf "[ \e[38;5;17m%${#_t_num_files}s\e[0m ] " "$i"
        #    printf " %${#_t_num_files}s \e[38;5;19m│\e[0m " "$i"
        #fi
        echo "${prefix}${lsname/${file}/${name}}"
    done

    if [ "$_t_incomplete" = "true" ]; then
        printf \
            "%*.*s⁞ %*.*s\e[38;5;19m⁞\e[0m " \
            "${#_t_num_files}" "${#_t_num_files}" "" \
            "${#lsinfo}" "${#lsinfo}" ""
        # for (( i=0; i<${#lsinfo}; i++ )); do
        #     [ "$i" -lt "3" ] && echo -n "." || echo -n " "
        # done
        for (( i=0; i<${#prefix}; i++ )); do
            if [ "${prefix:$i:1}" = "│" ]; then
                echo -n "⁞"
            elif [ "${prefix:$i:1}" = "├" ]; then
                echo -n "⁞"
            else
                echo -n " "
            fi
        done
        echo "⁞"
        echo "Note: Output truncated after ${_t_max_files} entries."
    fi

    _t_reset --keep-files

    shopt -u nullglob
    shopt -u nocaseglob
    shopt -u dotglob

}

alias t="_t_tree"
alias ta="_t_tree -a"
alias tl="_t_tree -l"
alias tal="_t_tree -al"
alias tla="_t_tree -la"
alias tt="_t_tree -l"
alias tta="_t_tree -la"

###########################################################################
# vi/vim
###########################################################################

function _v_vim()
{
    declare cmd=$1
    shift
    declare re='^[1-9][0-9]*$'
    if [[ $# = 1 && $1 =~ $re && $1 -le ${#_t_files[@]} ]] ; then
        command "$cmd" "${_t_files[$1]}"
    else
        command "$cmd" -- "$@"
    fi
}

if [ -x "$(command -v vim)" ]; then

    alias vi="_v_vim vim"

else

    unalias vi 2>/dev/null

fi

if [ -x "$(command -v view)" ]; then

    alias view="_v_vim view"

else

    unalias view 2>/dev/null

fi

###########################################################################
# sudo and vim
###########################################################################

function sudo() {
    if [ "X$1" = "Xvi" -o "X$1" = "Xview" ]; then
        if [ "X$1" = "Xvi" ]; then
            local vim_cmd=$(which vim)
        else
            local vim_cmd=$(which "$1")
        fi
        if [ ! -x "$vim_cmd" ]; then
            vim_cmd="$1"
        fi
        shift
        command sudo -E INSUDOEDIT=yes HOME="$HOME" "$vim_cmd" -Z "$@"
    else
        command sudo "$@"
    fi
}

###########################################################################
# view for pdf files
###########################################################################

function _aviewer_view() {
    if [ "$#" = 1 ]; then
        file=$(basename -- "$1")
        ext="${file##*.}"
        case "$ext" in
            pdf|svg|bmp|gif|jpg|jpeg|png|pbm|pgm|ppm|xbm|xpm|tiff|html)
                open -a "$HOME/.dotfiles/apps/aViewer.app" "$1"
                return
                ;;
        esac
    fi
    command view "$@"
}

if [ -e "$HOME/.bin_mac" -a -e "$HOME/.dotfiles/apps/aViewer.app" ]; then

    alias view="_aviewer_view"

else

    unalias view 2>/dev/null

fi

###########################################################################
# texdoc
###########################################################################

if [ -x "$(command -v texdoc)" ]; then

    alias texdoc='texdoc -l'

else

    unalias texdoc 2>/dev/null

fi


###########################################################################
# top
###########################################################################

if [ -x "$(command -v htop)" ]; then

    alias top="htop"

elif [ "$(uname)" = "Darwin" ]; then

    alias top="top -u"

else

    unalias top 2>/dev/null

fi

###########################################################################
# man
###########################################################################

if [ -x "$(command -v less)" ]; then

    MAN_LESS_OPTIONS="--RAW-CONTROL-CHARS"
    MAN_LESS_OPTIONS="$MAN_LESS_OPTIONS --squeeze-blank-lines"
    MAN_LESS_OPTIONS="$MAN_LESS_OPTIONS --quiet"
    MAN_LESS_OPTIONS="$MAN_LESS_OPTIONS --quit-if-one-screen"

    if [ "$(function _t { echo "$2"; }; _t $(less -V))" -gt 500 ]; then
        MAN_LESS_OPTIONS="$MAN_LESS_OPTIONS --mouse"
        MAN_LESS_OPTIONS="$MAN_LESS_OPTIONS --wheel-lines 3"
    else
        MAN_LESS_OPTIONS="$MAN_LESS_OPTIONS --quit-at-eof"
    fi

    function _man_less() {
        LESS_TERMCAP_mb=$'\E[36m'     \
        LESS_TERMCAP_md=$'\E[36m'     \
        LESS_TERMCAP_me=$'\E[0m'        \
        LESS_TERMCAP_so=$'\E[48;5;8m' \
        LESS_TERMCAP_se=$'\E[0m'        \
        LESS_TERMCAP_us=$'\E[36m'     \
        LESS_TERMCAP_ue=$'\E[0m'        \
        MANPATH="$CONDA_PREFIX/share/man:" \
        PAGER="less $MAN_LESS_OPTIONS" \
        \man "$@"
    }

    alias man='_man_less'

elif [ -f "$HOME/.vim/bundle/vimpager/vimpager" ]; then

    function _man_vimpager() {(
        if [ -z "$*" ]; then
            \man
            return
        fi
        export MANPATH="$CONDA_PREFIX/share/man:"
        IFS=$'\n' read -rd '' -a MANFILES <<<"$(\man -w "$@")"
        for MANFILE in "${MANFILES[@]}"; do
            env \
                PAGER="$HOME/.vim/bundle/vimpager/vimpager" \
                man "$MANFILE"
        done
    )}

    alias man=_man_vimpager

else

    unalias man 2>/dev/null

fi

###########################################################################
# which
###########################################################################

if (\which --tty-only cat >/dev/null 2>&1); then
    alias which='alias | \which --tty-only --read-alias --show-dot --show-tilde'
fi

###########################################################################
# print path in a sane way
###########################################################################

function path() {(
    if [ -z "$1" ]; then
        P=$PATH
    else
        P=$1
    fi
    IFS=:
    printf "%s\n" $P
)}

########################################################################
# scp
########################################################################

alias scp='rsync --partial --progress --compress --perms --no-group --chmod=Fg+w'

########################################################################
# ipython in mac 
########################################################################

if [ -e "$HOME/.bin_mac" ]; then

    alias ipython='\ipython --TerminalInteractiveShell.true_color=True'

else

    unalias ipython 2>/dev/null

fi

########################################################################
# cenv (conda helper)
########################################################################

function cenv() {

    case "$1" in

        init|-init)

            local ENV_FILE="environment.yml"
            if [ -n "$2" ]; then
                if [ "${2%.yml}" = "${2}" ]; then
                    ENV_FILE=~/.dotfiles/envs/env-"$2".yml
                else
                    ENV_FILE="$2"
                fi
            fi

            if [ -f "${ENV_FILE}" ]; then

                echo "File \`${ENV_FILE}\` already exists. Doing nothing."
                return 1

            else

		cat <<- YMLFILE > "${ENV_FILE}"
		name: env-CHANGE-ME
		channels:
		  - conda-forge
		  - default
		platforms:
		  - linux-64
		  - osx-64
		dependencies:
		  # basic deps
		  - autoconf
		  - automake
		  - bash
		  - bash-completion
		  - bison
		  - c-compiler
		  - cmake
		  - coreutils
		  - ctags
		  - curl
		  - findutils
		  - flex
		  - gawk
		  - git
		  - git-subrepo
		  - htop
		  - hunspell
		  - hunspell-en
		  - imagemagick
		  - ipython
		  - libtool
		  - make
		  - nodejs
		  - python
		  - pip
		  - requests
		  - tar
		  - tmux=3.1
		  - tree
		  - vim
		  - wget
		  - which
		  # project deps
		  - numpy
		  - matplotlib
		  - singular
		  - jupyterlab
		  - pip:
		    - sjk
		YMLFILE

                echo "File \`${ENV_FILE}\` created."

            fi

            ;;

        edit|-edit)
            local ENV_FILE="environment.yml"
            if [ -n "$2" ]; then
                if [ -f "$2" ]; then
                    ENV_FILE="$2"
                else
                    ENV_FILE=~/.dotfiles/envs/env-"$2".yml
                fi
            fi
            if [ -f "${ENV_FILE}" ]; then
                "$EDITOR" "$ENV_FILE"
            else
                echo "File \`${ENV_FILE}\` does not exist. Run \`cenv init${2:+ }${2}\` first."
                return 1
            fi
            ;;

        create|-create)
            local ENV_FILE="environment.yml"
            if [ -n "$2" ]; then
                if [ -f "$2" ]; then
                    ENV_FILE="$2"
                else
                    ENV_FILE=~/.dotfiles/envs/env-"$2".yml
                fi
            fi
            local LOCK_FILE="${ENV_FILE%.yml}.conda-lock.yml"
            if [ -f "$ENV_FILE" ]; then
                local ENV_NAME=$(sed -E -n -e '1s/name: (.*)/\1/p' "$ENV_FILE")
                if [ "$ENV_NAME" = "env-CHANGE-ME" ]; then
                    echo "Please change name in $ENV_FILE"
                    return 1
                elif [ "$ENV_NAME" ]; then
                    local CACHE_FILE="$HOME/.cenv-cache/$ENV_NAME.env"
                    if [ -e "$CACHE_FILE" ]; then
                        rm "$CACHE_FILE"
                    fi
                    if [ ! -f "$LOCK_FILE" ]; then
                        cenv lock "$ENV_FILE" || return 4
                    fi
                    echo "Creating environment \`$ENV_NAME\`."
                    # mamba env create --file "$ENV_FILE"
                    # mamba lock install --name "$ENV_NAME" "$LOCK_FILE"
                    conda lock install --name "$ENV_NAME" "$LOCK_FILE"
                else
                    echo "Could not determine environment from \`$ENV_FILE\`."
                    return 2
                fi
            else
                echo "Could not find file \`$ENV_FILE\`."
                return 3
            fi
            ;;

        lock|-lock)
            local ENV_FILE="environment.yml"
            if [ -n "$2" ]; then
                if [ -f "$2" ]; then
                    ENV_FILE="$2"
                else
                    ENV_FILE=~/.dotfiles/envs/env-"$2".yml
                fi
            fi
            local LOCK_FILE="${ENV_FILE%.yml}.conda-lock.yml"
            if [ -f "$ENV_FILE" ]; then
                local ENV_NAME=$(sed -E -n -e '1s/name: (.*)/\1/p' "$ENV_FILE")
                if [ "$ENV_NAME" = "env-CHANGE-ME" ]; then
                    echo "Please change name in $ENV_FILE"
                    return 1
                elif [ "$ENV_NAME" ]; then
                    echo "Creating lock for environment \`$ENV_NAME\`."
                    # mamba lock --file "$ENV_FILE" --lockfile "$LOCK_FILE"
                    conda lock --file "$ENV_FILE" --lockfile "$LOCK_FILE"
                else
                    echo "Could not determine environment from \`$ENV_FILE\`."
                    return 2
                fi
            else
                echo "Could not find file \`$ENV_FILE\`."
                return 3
            fi
            ;;

        update|-update)
            shift
            cenv lock "$@" && cenv create "$@"
            ;;

        remove|-remove)
            local ENV_FILE="environment.yml"
            if [ -n "$2" ]; then
                if [ -f "$2" ]; then
                    ENV_FILE="$2"
                else
                    ENV_FILE=~/.dotfiles/envs/env-"$2".yml
                fi
            fi
            if [ -f "$ENV_FILE" ]; then
                local ENV_NAME=$(sed -E -n -e '1s/name: (.*)/\1/p' "$ENV_FILE")
                if [ "$ENV_NAME" ]; then
                    echo "Removing environment \`$ENV_NAME\`."
                    local CACHE_FILE="$HOME/.cenv-cache/$ENV_NAME.env"
                    if [ -e "$CACHE_FILE" ]; then
                        rm "$CACHE_FILE"
                    fi
                    mamba env remove --name "$ENV_NAME"
                else
                    echo "Could not determine environment from \`$ENV_FILE\`."
                    return 1
                fi
            else
                echo "Could not find file \`$ENV_FILE\`."
                return 2
            fi
            ;;

        deactivate|-deactivate)
            if [ "$CONDA_DEFAULT_ENV" = "$INITIAL_CONDA_ENV" ]; then
                echo 'Already in initial conda environment. Will not deactivate.'
                echo 'Note: run `conda deactivate` to force deactivation.'
            else
                echo 'Deactivating current environment.'
                conda deactivate
            fi
            ;;

        list|-list)
            local ENV
            for ENV in "$CONDA_BASE"/envs/*; do
                echo "${ENV##*/}"@"$ENV"
            done \
                | column -t -s@ \
                | cut -c -$COLUMNS
            ;;

        activate|-activate)
            local REQ_ENV
            if [ -n "$2" ]; then
                if [ "${2:0:3}" = "env" ]; then
                    REQ_ENV="$2"
                else
                    REQ_ENV=env-"$2"
                fi
            elif [ -f "environment.yml" ]; then
                REQ_ENV=$(sed -E -n -e '1s/name: (.*)/\1/p' environment.yml)
            fi
            if [ "$REQ_ENV" ]; then
                if [ "$REQ_ENV" = "$CONDA_DEFAULT_ENV" ]; then
                    echo "Environment \`$REQ_ENV\` already active."
                else
                    echo "Activating environment \`$REQ_ENV\`."
                    conda activate "$REQ_ENV"
                fi
            else
                echo "Please indicate which environment to activate (could not guess from \`environment.yml\`)."
                cenv usage
                return 1
            fi
            ;;

        cache|-cache)
            local REQ_ENV
            if [ -n "$2" ]; then
                if [ "${2:0:3}" = "env" ]; then
                    REQ_ENV="$2"
                else
                    REQ_ENV=env-"$2"
                fi
            elif [ -f "environment.yml" ]; then
                REQ_ENV=$(sed -E -n -e '1s/name: (.*)/\1/p' environment.yml)
            fi
            if [ "$REQ_ENV" ]; then
                echo "Creating cache of environment \`$REQ_ENV\`."
                mkdir -p "$HOME"/.cenv-cache
                env -i \
                    HOME="$HOME" \
                    USER="$USER" \
                    _BASH_PROFILE_NOECHO=noecho \
                    TMUX=fake \
                    "$BASH" -l -i -c "\
                        conda activate '$REQ_ENV' && \
                        env > '$HOME'/.cenv-cache/'$REQ_ENV'.env ;\
                    "
            else
                cenv usage
                return 1
            fi
            ;;

        fast|-fast)
            shift
            cenv fast-"$@"
            ;;

        fast-activate|-fast-activate|-fast--activate)
            local REQ_ENV
            if [ -n "$2" ]; then
                if [ "${2:0:3}" = "env" ]; then
                    REQ_ENV="$2"
                else
                    REQ_ENV=env-"$2"
                fi
            elif [ -f "environment.yml" ]; then
                REQ_ENV=$(sed -E -n -e '1s/name: (.*)/\1/p' environment.yml)
            fi
            if [ "$REQ_ENV" ]; then
                if [ "$REQ_ENV" = "$CONDA_DEFAULT_ENV" ]; then
                    echo "Environment \`$REQ_ENV\` already active."
                else
                    local CACHE_FILE="$HOME/.cenv-cache/$REQ_ENV.env"
                    if [ ! -f "$CACHE_FILE" ]; then
                        cenv cache "$REQ_ENV"
                    fi
                    if [ -f "$CACHE_FILE" ]; then
                        if [ "$REQ_ENV" = "$INITIAL_CONDA_ENV" ]; then
                            echo "Rectivating inital environment \`$REQ_ENV\` (fast activation mode)."
                        else
                            echo "Activating environment \`$REQ_ENV\` (fast activation mode)."
                        fi
                        local -a ENV_ARGS
                        local ENV_LINE
                        local -a ENV_LINES
                        local V
                        readarray ENV_LINES < "$CACHE_FILE"
                        for ENV_LINE in "${ENV_LINES[@]}"; do
                            if ! [[ $ENV_LINE == TMUX* ]]; then
                                ENV_ARGS+=("${ENV_LINE%$'\n'}")
                            fi
                        done
                        for V in \
                                "${!TERM@}" \
                                "${!ITERM@}" \
                                "${!LANG@}" \
                                "${!TMUX@}" \
                                "${!BASE@}" \
                                "${!XPC@}" \
                                "${!PWD@}" \
                                "${!INITIAL_CONDA_ENV@}" \
                        ; do
                            ENV_ARGS+=("$V=${!V}")
                        done
                        exec env -i \
                            "${ENV_ARGS[@]}" \
                            CENV_IN_FAST_ENV=yes \
                            PREVIOUS_CONDA_ENV="${CONDA_DEFAULT_ENV}" \
                            bash
                    else
                        echo "Error: Could not activate environment \`$REQ_ENV\`."
                        return 1
                    fi
                fi
            else
                echo "Please indicate which environment to activate (could guess from \`$ENV_FILE\`)."
                cenv usage
                return 2
            fi
            ;;

        fast-deactivate|-fast-deactivate|-fast--deactivate)
            if [ "$CONDA_DEFAULT_ENV" = "$INITIAL_CONDA_ENV" ]; then
                echo 'Already in initial conda environment. Will not deactivate.'
                echo 'Note: run `conda deactivate` to force deactivation.'
            elif [ -n "$CENV_IN_FAST_ENV" ]; then
                cenv fast-activate env0
            else
                cenv deactivate
            fi
            ;;

        *)

		cat <<- USAGE
		Usage:
		    cenv activate            (activate environment using ./environment.yml)
		    cenv activate ENV-NAME   (activate environment ENV-NAME)
		    cenv deactivate          (deactivate current environment)
		    cenv fast CMD ENV-NAME   (fast (de)activate environment ENV-NAME)
		    cenv cache ENV-NAME      (chache environment ENV-NAME)
		    cenv init                (create template ./environment.yml)
		    cenv create [ENV-NAME]   (create environment using ./environment.yml or ENV-NAME)
		    cenv update [ENV-NAME]   (update environment using ./environment.yml or ENV-NAME)
		    cenv remove [ENV-NAME]   (remove environment using ./environment.yml or ENV-NAME)
		    cenv list                (list created environments)
		    cenv usage               (show this help)
		
		Aliases:
		    act          = cenv fast activate
		    activate     = cenv activate
		    deact        = cenv fast deactivate
		    deactivate   = cenv deactivate
		USAGE
            ;;

    esac
}

alias act='cenv fast activate'
alias activate='cenv activate'
alias deact='cenv fast deactivate'
alias deactivate='cenv deactivate'

########################################################################
# 
########################################################################

function penv() {
    env "$@" \
        | sort \
        | column -t -s= \
        | cut -c -$COLUMNS
}

########################################################################
# 
########################################################################

function __dropbox_ignore() {
    local CMD="$1"
    local FILE="$2"
    if [ ! "${FILE}" ]; then
        CMD=usage
    fi
    case "$CMD" in
        ignore)
            xattr -w com.dropbox.ignored 1 "$FILE"
            ;;
        unignore)
            xattr -d com.dropbox.ignored "$FILE"
            ;;
        *)
		cat <<- USAGE
		Usage:
		    dropbox_ignore FILE  
		    dropbox_unignore FILE  
		USAGE
            ;;
    esac
}

alias dropbox_ignore='__dropbox_ignore ignore'
alias dropbox_unignore='__dropbox_ignore unignore'

########################################################################
# 
########################################################################

# vi: ft=bash
