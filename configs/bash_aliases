#!/bin/bash

###########################################################################
# ask for confirmation before deleting/overwriting
###########################################################################

alias rm='rm -i'
alias cp='cp -i'
alias mv='mv -i'

###########################################################################
# enable color support of ls and also add handy aliases
###########################################################################

if \ls -d --color -Chv / 1>/dev/null 2>&1; then

    # GNU ls

    export LS_COLORS="$(printf "%s:" \
        'rs=0'          'di=01;34'      'ln=01;36'     \
        'mh=00'         'pi=40;33'      'so=01;35'     \
        'do=01;35'      'bd=40;33;01'   'cd=40;33;01'  \
        'or=40;31;01'   'su=37;41'      'sg=30;43'     \
        'ca=30;41'      'tw=30;42'      'ow=30;42'     \
        'st=37;44'      'ex=01;32'      '*.tar=01;31'  \
        '*.tgz=01;31'   '*.arj=01;31'   '*.taz=01;31'  \
        '*.lzh=01;31'   '*.lzma=01;31'  '*.tlz=01;31'  \
        '*.txz=01;31'   '*.zip=01;31'   '*.z=01;31'    \
        '*.Z=01;31'     '*.dz=01;31'    '*.gz=01;31'   \
        '*.lz=01;31'    '*.xz=01;31'    '*.bz2=01;31'  \
        '*.bz=01;31'    '*.tbz=01;31'   '*.tbz2=01;31' \
        '*.tz=01;31'    '*.deb=01;31'   '*.rpm=01;31'  \
        '*.jar=01;31'   '*.war=01;31'   '*.ear=01;31'  \
        '*.sar=01;31'   '*.rar=01;31'   '*.ace=01;31'  \
        '*.zoo=01;31'   '*.cpio=01;31'  '*.7z=01;31'   \
        '*.rz=01;31'    '*.jpg=01;35'   '*.jpeg=01;35' \
        '*.gif=01;35'   '*.bmp=01;35'   '*.pbm=01;35'  \
        '*.pgm=01;35'   '*.ppm=01;35'   '*.tga=01;35'  \
        '*.xbm=01;35'   '*.xpm=01;35'   '*.tif=01;35'  \
        '*.tiff=01;35'  '*.png=01;35'   '*.svg=01;35'  \
        '*.svgz=01;35'  '*.mng=01;35'   '*.pcx=01;35'  \
        '*.mov=01;35'   '*.mpg=01;35'   '*.mpeg=01;35' \
        '*.m2v=01;35'   '*.mkv=01;35'   '*.webm=01;35' \
        '*.ogm=01;35'   '*.mp4=01;35'   '*.m4v=01;35'  \
        '*.mp4v=01;35'  '*.vob=01;35'   '*.qt=01;35'   \
        '*.nuv=01;35'   '*.wmv=01;35'   '*.asf=01;35'  \
        '*.rm=01;35'    '*.rmvb=01;35'  '*.flc=01;35'  \
        '*.avi=01;35'   '*.fli=01;35'   '*.flv=01;35'  \
        '*.gl=01;35'    '*.dl=01;35'    '*.xcf=01;35'  \
        '*.xwd=01;35'   '*.yuv=01;35'   '*.cgm=01;35'  \
        '*.emf=01;35'   '*.axv=01;35'   '*.anx=01;35'  \
        '*.ogv=01;35'   '*.ogx=01;35'   '*.aac=00;36'  \
        '*.au=00;36'    '*.flac=00;36'  '*.mid=00;36'  \
        '*.midi=00;36'  '*.mka=00;36'   '*.mp3=00;36'  \
        '*.mpc=00;36'   '*.ogg=00;36'   '*.ra=00;36'   \
        '*.wav=00;36'   '*.axa=00;36'   '*.oga=00;36'  \
        '*.spx=00;36'   '*.xspf=00;36'  )"

    ls_cmd='ls --color=auto --quoting-style=literal -Chv'

elif \ls -d -GCh / 1>/dev/null 2>&1; then

    # BSD ls

    export CLICOLOR=1
    export LSCOLORS=exgxfxdxcxegedabagacad
    ls_cmd='ls -GCh'

else

    # Weird ls

    ls_cmd='ls'

fi

function _ls_hidden_inner()
{
    local opts=$1
    shift

    if [ "$1" ]; then
        cd "$1"
    fi

    declare f p
    declare -a hidden_pats dir_files not_hidden_files
    #readarray -t hidden_pats < .hidden
    hidden_pats=("Icon?")
    if [ -r .hidden ]; then
        OIFS=$IFS
        IFS=$'\r\n' hidden_pats+=($(cat .hidden))
        IFS=$OIFS
    fi
    shopt -s nullglob
    dir_files=(*)
    shopt -u nullglob
    not_hidden_files=()

    for f in "${dir_files[@]}"; do
        for p in "${hidden_pats[@]}"; do
            [[ $f == $p ]] && continue 2
        done
        not_hidden_files+=("$f")
    done

    if [ ${#not_hidden_files[@]} -eq 0 ]; then
        $ls_cmd $opts
        return $?
    else
        $ls_cmd $opts -d -- "${not_hidden_files[@]}"
        return $?
    fi
}

function _ls_hidden()
{
    local opts=$1
    shift

    if [ $# -gt 1 -o \( $# -eq 1 -a ! -d "$1" \) ]; then
        $ls_cmd $opts "$@"
        return $?
    fi

    local dir_name=$1
    if [ -z "$dir_name" ]; then
        dir_name=$PWD
    fi

    if [ "$(basename "$dir_name")" = "Downloads" ]; then
        opts="$opts -Artc"
    fi

    # execute in subshell
    (
        _ls_hidden_inner "$opts" "$@"
        exit $?
    )
    return $?
}

alias ls="$ls_cmd"
alias l="_ls_hidden ''"
alias la="$ls_cmd -A"
alias ll="_ls_hidden -l"

###########################################################################
# vi/vim
###########################################################################

if [ -x "$(command -v vim)" ]; then

    alias vi=vim

else

    unalias vi 2>/dev/null

fi

###########################################################################
# sudo and vim
###########################################################################

function sudo() {
    if [ "X$1" = "Xvi" -o "X$1" = "Xview" ]; then
        if [ "X$1" = "Xvi" ]; then
            local vim_cmd=$(which vim)
        else
            local vim_cmd=$(which "$1")
        fi
        if [ ! -x "$vim_cmd" ]; then
            vim_cmd="$1"
        fi
        shift
        command sudo -E INSUDOEDIT=yes HOME="$HOME" "$vim_cmd" -Z "$@"
    else
        command sudo "$@"
    fi
}

###########################################################################
# texdoc
###########################################################################


if [ -x "$(command -v texdoc)" ]; then

    alias texdoc='texdoc -l'

else

    unalias texdoc 2>/dev/null

fi


###########################################################################
# top
###########################################################################

if [ -x "$(command -v htop)" ]; then

    alias top="htop"

elif [ "$(uname)" = "Darwin" ]; then

    alias top="top -u"

else

    unalias top 2>/dev/null

fi

###########################################################################
# man
###########################################################################

if [ -x "$(command -v less)" ]; then

    MAN_LESS_OPTIONS="--RAW-CONTROL-CHARS"
    MAN_LESS_OPTIONS="$MAN_LESS_OPTIONS --squeeze-blank-lines"
    MAN_LESS_OPTIONS="$MAN_LESS_OPTIONS --quiet"
    MAN_LESS_OPTIONS="$MAN_LESS_OPTIONS --quit-if-one-screen"

    if [ "$(function _t { echo "$2"; }; _t $(less -V))" -gt 500 ]; then
        MAN_LESS_OPTIONS="$MAN_LESS_OPTIONS --mouse"
        MAN_LESS_OPTIONS="$MAN_LESS_OPTIONS --wheel-lines 3"
    else
        MAN_LESS_OPTIONS="$MAN_LESS_OPTIONS --quit-at-eof"
    fi

    function _man_less() {
        LESS_TERMCAP_mb=$'\E[36m'     \
        LESS_TERMCAP_md=$'\E[36m'     \
        LESS_TERMCAP_me=$'\E[0m'        \
        LESS_TERMCAP_so=$'\E[48;5;8m' \
        LESS_TERMCAP_se=$'\E[0m'        \
        LESS_TERMCAP_us=$'\E[36m'     \
        LESS_TERMCAP_ue=$'\E[0m'        \
        MANPATH="$CONDA_PREFIX/share/man:" \
        PAGER="less $MAN_LESS_OPTIONS" \
        \man "$@"
    }

    alias man='_man_less'

elif [ -f "$HOME/.vim/bundle/vimpager/vimpager" ]; then

    function _man_vimpager() {(
        if [ -z "$*" ]; then
            \man
            return
        fi
        export MANPATH="$CONDA_PREFIX/share/man:"
        IFS=$'\n' read -rd '' -a MANFILES <<<"$(\man -w "$@")"
        for MANFILE in "${MANFILES[@]}"; do
            env \
                PAGER="$HOME/.vim/bundle/vimpager/vimpager" \
                man "$MANFILE"
        done
    )}

    alias man=_man_vimpager

else

    unalias man 2>/dev/null

fi

###########################################################################
# which
###########################################################################

if (\which --tty-only cat >/dev/null 2>&1); then
    alias which='alias | \which --tty-only --read-alias --show-dot --show-tilde'
fi

###########################################################################
# print path in a sane way
###########################################################################

function path() {(
    if [ -z "$1" ]; then
        P=$PATH
    else
        P=$1
    fi
    IFS=:
    printf "%s\n" $P
)}

########################################################################
# scp
########################################################################

alias scp='rsync --partial --progress --compress --perms --no-group --chmod=Fg+w'

########################################################################
# ipython in mac 
########################################################################

if [ -e "$HOME/.bin_mac" ]; then

    alias ipython='\ipython --TerminalInteractiveShell.true_color=True'

else

    unalias ipython 2>/dev/null

fi

########################################################################
# cenv (conda helper)
########################################################################

function cenv() {

    case "$1" in

        init|-init)

            if [ -f "environment.yml" ]; then

                echo 'File `environment.yml` already exists. Doing nothing.'

            else

		cat <<- YMLFILE > ./environment.yml
		name: env-CHANGE-ME
		channels:
		  - conda-forge
		  - default
		dependencies:
		  # basic deps
		  - autoconf
		  - automake
		  - bash
		  - bash-completion
		  - bison
		  - c-compiler
		  - cmake
		  - coreutils
		  - ctags
		  - curl
		  - findutils
		  - flex
		  - gawk
		  - git
		  - git-subrepo
		  - htop
		  - hunspell
		  - hunspell-en
		  - imagemagick
		  - ipython
		  - libtool
		  - make
		  - nodejs
		  - python
		  - requests
		  - tar
		  - tmux=3.1
		  - tree
		  - vim
		  - wget
		  - which
		  # project deps
		  - numpy
		  - matplotlib
		  - singular
		  - jupyterlab
		  - pip:
		    - sjk
		YMLFILE

                echo 'File `environment.yml` created.'

            fi

            ;;

        create|-create)
            if [ -f "environment.yml" ]; then
                local ENV_NAME=$(sed -E -n -e '1s/name: (.*)/\1/p' environment.yml)
                if [ "$ENV_NAME" = "env-CHANGE-ME" ]; then
                    echo "Please change name in environment.yml"
                elif [ "$ENV_NAME" ]; then
                    echo "Creating environment \`$ENV_NAME\`."
                    mamba env create --file "environment.yml"
                else
                    echo 'Could not determine environment from `environment.yml`.'
                fi
            else
                echo 'Could not find file `environment.yml`.'
            fi
            ;;

        update|-update)
            if [ -f "environment.yml" ]; then
                local ENV_NAME=$(sed -E -n -e '1s/name: (.*)/\1/p' environment.yml)
                if [ "$ENV_NAME" = "env-CHANGE-ME" ]; then
                    echo "Please change name in environment.yml"
                elif [ "$ENV_NAME" ]; then
                    echo "Creating environment \`$ENV_NAME\`."
                    mamba env update --file "environment.yml" --prune
                else
                    echo 'Could not determine environment from `environment.yml`.'
                fi
            else
                echo 'Could not find file `environment.yml`.'
            fi
            ;;

        remove|-remove)
            if [ -f "environment.yml" ]; then
                local ENV_NAME=$(sed -E -n -e '1s/name: (.*)/\1/p' environment.yml)
                if [ "$ENV_NAME" ]; then
                    echo "Removing environment \`$ENV_NAME\`."
                    mamba env remove --name "$ENV_NAME"
                else
                    echo 'Could not determine environment from `environment.yml`.'
                fi
            else
                echo 'Could not find file `environment.yml`.'
            fi
            ;;

        deactivate|-deactivate)
            echo 'Deactivating current environment.'
            conda deactivate
            ;;

        usage|-usage|help|-help|-*)

		cat <<- USAGE
		Usage:
		    cenv              (activate environment using ./environment.yml)
		    cenv ENV-NAME     (activate environment ENV-NAME)
		    cenv deactivate   (deactivate current environment)
		    cenv init         (create template ./environment.yml)
		    cenv create       (create environment using ./environment.yml)
		    cenv update       (update environment using ./environment.yml)
		    cenv remove       (remove environment using ./environment.yml)
		    cenv usage        (show this help)
		
		Aliases:
		    act          = cenv
		    activate     = cenv
		    deact        = cenv deactivate
		    deactivate   = cenv deactivate
		USAGE
            ;;

        *)
            local REQ_ENV
            if [ "$1" ]; then
                if [ "x$1" = "xenv0" ]; then
                    REQ_ENV=env0
                else
                    REQ_ENV=env-"$1"
                fi
            elif [ -f "environment.yml" ]; then
                REQ_ENV=$(sed -E -n -e '1s/name: (.*)/\1/p' environment.yml)
            fi
            if [ "$REQ_ENV" ]; then
                if [ "$REQ_ENV" = "$CONDA_DEFAULT_ENV" ]; then
                    echo "Environment \`$REQ_ENV\` already active."
                else
                    echo "Activating environment \`$REQ_ENV\`."
                    conda activate "$REQ_ENV"
                fi
            else
                cenv usage
            fi
            ;;

    esac
}

alias act='cenv'
alias activate='cenv'
alias deact='cenv deactivate'
alias deactivate='cenv deactivate'

########################################################################
# 
########################################################################

function penv() {
    env "$@" \
        | sort \
        | column -t -s= \
        | cut -c -$COLUMNS
}

########################################################################
# 
########################################################################

# vi: ft=bash
