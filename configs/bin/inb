#!/usr/bin/env python3

import base64
import html
import http.server
import json
import markdown
import multiprocessing as mp
import os
import pygments
import pygments.lexers
import pygments.formatters
import queue
import shutil
import socketserver
import sys
import threading
import time

from pathlib import Path

from PyQt5.QtCore import *
from PyQt5.QtWidgets import *
from PyQt5.QtGui import *
from PyQt5.QtWebEngineWidgets import *
from PyQt5.QtPrintSupport import *

########################################################################
# ViewerApp
########################################################################

class ViewerApp:

    @classmethod
    def run(cls):
        app = cls()
        app.start_workers()
        try:
            app.io_loop()
        except KeyboardInterrupt:
            print()
            return

    def __init__(self):
        self.use_http_server = False
        if len(sys.argv) > 1:
            fp = self.file_path = Path(os.path.realpath(sys.argv[1]))
            if fp.suffix == ".inb":
                self.win_worker_class = NbViewer
            elif fp.suffix == ".html":
                self.win_worker_class = HtmlViewer
                self.use_http_server = True
            else:
                self.win_worker_class = ImageViewer
        else:
            self.win_worker_class = EchoViewer

    def start_workers(self):
        # Tell multiprocessing to use spawn, not fork
        mp.set_start_method('spawn')
        # Queues
        self.msg_queue = mp.Queue()
        self.io_ctrl_queue = mp.Queue()
        self.win_ctrl_queue = mp.Queue()
        # HTTP worker
        if self.use_http_server:
            self.http_worker = mp.Process(
                target=http_server,
                args=(self.file_path.parent, self.msg_queue),
                daemon=True,
            )
            self.http_worker.start()
        # Window worker
        self.win_worker = mp.Process(
            target=self.win_worker_class.worker,
            args=(self.msg_queue, self.win_ctrl_queue),
            daemon=True,
        )
        self.win_worker.start()
        # IO worker
        self.io_worker = threading.Thread(
            target=io_worker,
            args=(self.msg_queue, self.io_ctrl_queue),
            daemon=True,
        )
        self.io_worker.start()

    def io_loop(self):
        i = 0
        while True:
            for t,q in (
                ('io',  self.io_ctrl_queue),
                ('win', self.win_ctrl_queue),
            ):
                try:
                    msg = q.get(False)
                except queue.Empty:
                    pass
                else:
                    if msg == "Quit":
                        return
            time.sleep(0.25)

########################################################################
# http_server
########################################################################

def http_server(path, msg_queue):
    os.chdir(path)
    addr = ('0.0.0.0', 0)
    Server = http.server.ThreadingHTTPServer
    Handler = http.server.SimpleHTTPRequestHandler
    with Server(addr, Handler) as httpd:
        host, port = httpd.socket.getsockname()[:2]
        url_host = f'[{host}]' if ':' in host else host
        msg_queue.put(f"http://{url_host}:{port}/")
        httpd.serve_forever()

########################################################################
# io_worker
########################################################################

def io_worker(msg_queue, ctrl_queue):
    print("\033[9999;1H", end="")
    status_msg = "ready"
    i = 0
    while True:
        print_status_msg("ready")
        try:
            msg = input("> ")
        except:
            print()
            ctrl_queue.put("Quit")
            break
        msg_queue.put(f"{msg}")
        i += 1

########################################################################
# print_msg
########################################################################

def print_status_msg(status_msg):
    status_msg = status_msg[:15]
    ncols = shutil.get_terminal_size((80,20)).columns
    pad = ncols-16
    print(f"\0337\r\033[{pad}C{status_msg:>15}\0338", end="")

########################################################################
# FloatingWindow
########################################################################

class FloatingWindow:

    @classmethod
    def worker(cls, io_msg_queue, win_msg_queue):
        qapp = QApplication([])
        fw = cls(qapp, io_msg_queue, win_msg_queue)
        exit_code = fw.exec_()
        del fw
        win_msg_queue.put("Quit")
        return exit_code

    def __init__(self, qapp, io_msg_queue, win_msg_queue):
        self.io_msg_queue = io_msg_queue
        self.win_msg_queue = win_msg_queue
        self.qapp = qapp
        classes = [self.__class__]
        for C in classes:
            classes += list(C.__bases__)
        for C in reversed(classes):
            for name, method in C.__dict__.items():
                if name.startswith("_init_"):
                    method(self)

    def _init_qapp_(self):
        self.desktop = self.qapp.desktop()
        self.exec_ = self.qapp.exec_

    def _init_window_(self):
        sg = self.desktop.screenGeometry()
        ag = self.desktop.availableGeometry()
        w = int(ag.width()/2)
        h = ag.height()
        m = sg.height() - h
        self.window = window = QMainWindow()
        window.setStyleSheet("background-color: #222;")
        window.setWindowFlags(
            Qt.CustomizeWindowHint
            | Qt.WindowStaysOnTopHint
        )
        window.resize(w-10,h-45)
        window.move(w+5,m)#+26)
        window.show()

    def _init_io_timer_(self):
        self.iterm_activated = False
        self.io_msg_timer = QTimer()
        self.io_msg_timer.setInterval(100)
        self.io_msg_timer.timeout.connect(self.check_io_msg_queue)
        self.io_msg_timer.start()
    
    def check_io_msg_queue(self):
        if not self.iterm_activated:
            self.activate_iterm()
            self.iterm_activated = True
        try:
            msg = self.io_msg_queue.get(False)
        except queue.Empty:
            return
        else:
            self.handle_io_msg(msg)

    def activate_iterm(self):
        os.system("""osascript -e 'tell application "iTerm2" to activate'""")

    def handle_io_msg(self, msg):
        pass

########################################################################
# FileViewer
########################################################################

class FileViewer(FloatingWindow):

    def _init_file_(self):
        self.file_name = sys.argv[1]

    def _init_file_watcher_(self):
        self.check_file_stamp()
        self.fw_timer = QTimer()
        self.fw_timer.setInterval(100)
        self.fw_timer.timeout.connect(self.check_file_changes)
        self.fw_timer.start()
    
    def check_file_changes(self):
        if not self.check_file_stamp():
            for try_num in range(10):
                try:
                    self.reload_file()
                except FileNotFoundError:
                    time.sleep(0.1)
                    continue
                else:
                    break

    def check_file_stamp(self):
        try:
            self.previous_stamp = self.file_stamp
        except AttributeError:
            self.previous_stamp = None
        try:
            self.file_stamp = os.stat(self.file_name).st_mtime
        except FileNotFoundError:
            self.file_stamp = None
        return (self.file_stamp == self.previous_stamp)

    def reload_file(self):
        pass

########################################################################
# ImageViewer
########################################################################

class ImageViewer(FileViewer):

    def _init_viewer_(self):
        image = QImage(self.file_name)
        self.image_label = QLabel()
        self.image_label.setPixmap(QPixmap.fromImage(image))
        self.scroll = QScrollArea()
        self.scroll.setWidget(self.image_label)
        self.scroll.setHorizontalScrollBarPolicy(Qt.ScrollBarAlwaysOff)
        self.scroll.setVerticalScrollBarPolicy(Qt.ScrollBarAlwaysOff)
        self.scroll.setAlignment(Qt.AlignCenter)
        self.window.setCentralWidget(self.scroll)

    def reload_file(self):
        image = QImage(self.file_name)
        pxm = QPixmap.fromImage(image)
        size = pxm.size()
        self.image_label.setPixmap(pxm)
        self.image_label.resize(size)


########################################################################
# HtmlViewer
########################################################################

class HtmlViewer(FileViewer):

    def _init_browser_(self):
        self.base_url = None
        self.url_path = os.path.basename(self.file_name)
        self.browser = QWebEngineView()
        self.window.setCentralWidget(self.browser)

    def handle_io_msg(self, msg):
        if msg.startswith('http'):
            self.base_url = msg
            self.reload_file()

    def reload_file(self):
        if self.base_url:
            full_url = self.base_url + self.url_path
            self.browser.load(QUrl(full_url))

########################################################################
# EchoViewer
########################################################################

class EchoViewer(FloatingWindow):

    def _init_browser_(self):
        self.browser = QWebEngineView()
        self.page = self.browser.page()
        self.page.setBackgroundColor(Qt.transparent)
        self.early_js_code = []
        self.browser.loadFinished.connect(self.on_load_finished)
        self.browser.setHtml(echo_viewer_html)
        self.window.setCentralWidget(self.browser)

    def on_load_finished(self, *args):
        pass

    def run_js(self, code):
        if self.page is None:
            self.early_js_code.append(code)
        else:
            if self.early_js_code:
                for c in self.early_js_code:
                    self.page.runJavaScript(c)
                self.early_js_code = None
            self.page.runJavaScript(code)
        
    def handle_io_msg(self, msg):
        self.run_js(rf"""
            label.innerHTML += "{msg}\n";
        """)

########################################################################
# floating_window_css_reset
########################################################################

css_reset=r"""
/***********************************************************************
 * Reset
 **********************************************************************/

/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
    margin         : 0;
    padding        : 0;
    border         : 0;
    font-size      : 100%;
    font           : inherit;
    vertical-align : baseline;
}

/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
    display: block;
}

body { line-height: 1; }
ol, ul { list-style: none; }
blockquote, q { quotes: none; }

blockquote:before, blockquote:after,
q:before, q:after {
    content : '';
    content : none;
}

table {
    border-collapse : collapse;
    border-spacing  : 0;
}

/***********************************************************************
 * From normalize.css/foundation
 **********************************************************************/

html {
    -ms-text-size-adjust        : 100%;
    -webkit-text-size-adjust    : 100%;
    -webkit-font-smoothing      : antialiased;
    -moz-osx-font-smoothing     : grayscale;
    -webkit-tap-highlight-color : transparent;
}

a {
    color           : inherit;
    text-decoration : none;
}

/***********************************************************************
 * Sane box model
 **********************************************************************/

html { box-sizing: border-box; }
*, *:before, *:after { box-sizing: inherit; }

"""

########################################################################
# floating_window_css
########################################################################

echo_viewer_css=r"""
/***********************************************************************
 * Main CSS
 **********************************************************************/

html, body {
    overflow : hidden;
    height : 100%;
}

pre {
    position    : absolute;
    top         : 10px;
    bottom      : 10px;
    left        : 10px;
    right       : 10px;
    overflow    : auto;
    color       : pink;
    font-size   : 12px;
    font-family : "Lucida Console", Monaco, monospace;
}
"""

########################################################################
# floating_window_js
########################################################################

echo_viewer_js=r"""

    let label = document.getElementById('label');

"""

########################################################################
# floating_window_html
########################################################################

echo_viewer_html=rf"""<!doctype html>
    <html lang="en">
    <meta charset="utf-8">
    <style>{css_reset}</style>
    <style>{echo_viewer_css}</style>
    <pre id="label"></pre>
    <script>{echo_viewer_js}</script>
"""

########################################################################
# NbViewer
########################################################################

class NbViewer(FileViewer):

    def _init_browser_(self):
        self.browser = QWebEngineView()
        self.page = None
        self.browser.loadFinished.connect(self.on_load_finished)
        self.browser.setHtml(nb_head_html)
        self.window.setCentralWidget(self.browser)
        self.early_js_code = []
        self.cell_ids = {}
        self.next_cell_id = 0
        self.used_cell_ids = set()

    def on_load_finished(self, *args):
        self.page = self.browser.page()
        self.reload_file()

    def run_js(self, code):
        if self.page is None:
            self.early_js_code.append(code)
        else:
            if self.early_js_code:
                for c in self.early_js_code:
                    self.page.runJavaScript(c)
                self.early_js_code = None
            self.page.runJavaScript(code)

    def get_cell_id(self, cell_type, cell_contents):
        if (cell_type, cell_contents) not in self.cell_ids:
            self.cell_ids[(cell_type, cell_contents)] = str(self.next_cell_id)
            cell_id = str(self.next_cell_id)
            self.next_cell_id += 1
        else:
            cell_id = cell_id0 = self.cell_ids[(cell_type, cell_contents)]
            a = 0
            while cell_id in self.used_cell_ids:
                a += 1
                cell_id = f"{cell_id0}_{a}" 
        self.used_cell_ids.add(cell_id)
        return f"cell_{cell_id}"

    def reload_file(self):
        self.used_cell_ids = set()
        update_data = []
        with open(self.file_name) as nf:
            cells = [["md", ""]]
            for line in nf.readlines():
                if line.startswith(r"%%-"):
                    cells.append(["hidden", ""])
                elif line.startswith(r"%%"):
                    words = line.split()
                    if len(words) > 1:
                        cell_type = words[1]
                    else:
                        cell_type = "md"
                    cells.append([cell_type, ""])
                    if cell_type == "out":
                        for word in words[2:]:
                            cells[-1][-1] += base64.b64decode(word).decode("utf-8")
                else:
                    cells[-1][-1] += line
            for cell_type, cell_contents in cells:
                try:
                    lexer = pygments.lexers.get_lexer_by_name(cell_type)
                except pygments.lexers.ClassNotFound:
                    lexer = pygments.lexers.get_lexer_by_name('text')
                else:
                    cell_type = lexer.aliases[0]
                if cell_type == "hidden":
                    continue
                elif cell_type == "md":
                    cell_contents = self.proc_md(cell_contents)
                elif cell_type == "out":
                    pass
                else: # code cell
                    cell_contents = cell_contents.strip()
                    cell_contents = self.proc_code(lexer, cell_contents)
                if cell_contents:
                    cell_id = self.get_cell_id(cell_type, cell_contents)
                    update_data.append([
                        cell_id, cell_type, cell_contents
                    ])
        update_data = json.dumps(update_data)
        js = f"update_cells({update_data});"
        self.run_js(js)

    def proc_md(self, md):
        try:
            mdp = self._mdp
        except AttributeError:
            mdp = self._mdp = markdown.Markdown() #extensions=['mdx_math'])
        out = mdp.convert(md.replace('\\', '\\\\'))
        print_status_msg("md")
        return out

    def proc_code(self, lexer, code):
        try:
            fmt = self._fmt
        except AttributeError:
            fmt = self._fmt = pygments.formatters.HtmlFormatter()
        return pygments.highlight(code, lexer, fmt)

########################################################################
# github_markdown_css
########################################################################

github_markdown_css=r"""
    .markdown-body .octicon {
      display: inline-block;
      fill: currentColor;
      vertical-align: text-bottom;
    }

    .markdown-body .anchor {
      float: left;
      line-height: 1;
      margin-left: -20px;
      padding-right: 4px;
    }

    .markdown-body .anchor:focus {
      outline: none;
    }

    .markdown-body h1 .octicon-link,
    .markdown-body h2 .octicon-link,
    .markdown-body h3 .octicon-link,
    .markdown-body h4 .octicon-link,
    .markdown-body h5 .octicon-link,
    .markdown-body h6 .octicon-link {
      color: #1b1f23;
      vertical-align: middle;
      visibility: hidden;
    }

    .markdown-body h1:hover .anchor,
    .markdown-body h2:hover .anchor,
    .markdown-body h3:hover .anchor,
    .markdown-body h4:hover .anchor,
    .markdown-body h5:hover .anchor,
    .markdown-body h6:hover .anchor {
      text-decoration: none;
    }

    .markdown-body h1:hover .anchor .octicon-link,
    .markdown-body h2:hover .anchor .octicon-link,
    .markdown-body h3:hover .anchor .octicon-link,
    .markdown-body h4:hover .anchor .octicon-link,
    .markdown-body h5:hover .anchor .octicon-link,
    .markdown-body h6:hover .anchor .octicon-link {
      visibility: visible;
    }

    .markdown-body h1:hover .anchor .octicon-link:before,
    .markdown-body h2:hover .anchor .octicon-link:before,
    .markdown-body h3:hover .anchor .octicon-link:before,
    .markdown-body h4:hover .anchor .octicon-link:before,
    .markdown-body h5:hover .anchor .octicon-link:before,
    .markdown-body h6:hover .anchor .octicon-link:before {
      width: 16px;
      height: 16px;
      content: ' ';
      display: inline-block;
      background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16' version='1.1' width='16' height='16' aria-hidden='true'%3E%3Cpath fill-rule='evenodd' d='M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z'%3E%3C/path%3E%3C/svg%3E");
    }.markdown-body {
      -ms-text-size-adjust: 100%;
      -webkit-text-size-adjust: 100%;
      line-height: 1.5;
      color: #24292e;
      font-family: -apple-system,BlinkMacSystemFont,Segoe UI,Helvetica,Arial,sans-serif,Apple Color Emoji,Segoe UI Emoji;
      font-size: 16px;
      line-height: 1.5;
      word-wrap: break-word;
    }

    .markdown-body details {
      display: block;
    }

    .markdown-body summary {
      display: list-item;
    }

    .markdown-body a {
      background-color: initial;
    }

    .markdown-body a:active,
    .markdown-body a:hover {
      outline-width: 0;
    }

    .markdown-body strong {
      font-weight: inherit;
      font-weight: bolder;
    }

    .markdown-body h1 {
      font-size: 2em;
      margin: .67em 0;
    }

    .markdown-body img {
      border-style: none;
    }

    .markdown-body code,
    .markdown-body kbd,
    .markdown-body pre {
      font-family: monospace,monospace;
      font-size: 1em;
    }

    .markdown-body hr {
      box-sizing: initial;
      height: 0;
      overflow: visible;
    }

    .markdown-body input {
      font: inherit;
      margin: 0;
    }

    .markdown-body input {
      overflow: visible;
    }

    .markdown-body [type=checkbox] {
      box-sizing: border-box;
      padding: 0;
    }

    .markdown-body * {
      box-sizing: border-box;
    }

    .markdown-body input {
      font-family: inherit;
      font-size: inherit;
      line-height: inherit;
    }

    .markdown-body a {
      color: #0366d6;
      text-decoration: none;
    }

    .markdown-body a:hover {
      text-decoration: underline;
    }

    .markdown-body strong {
      font-weight: 600;
    }

    .markdown-body hr {
      height: 0;
      margin: 15px 0;
      overflow: hidden;
      background: transparent;
      border: 0;
      border-bottom: 1px solid #dfe2e5;
    }

    .markdown-body hr:after,
    .markdown-body hr:before {
      display: table;
      content: "";
    }

    .markdown-body hr:after {
      clear: both;
    }

    .markdown-body table {
      border-spacing: 0;
      border-collapse: collapse;
    }

    .markdown-body td,
    .markdown-body th {
      padding: 0;
    }

    .markdown-body details summary {
      cursor: pointer;
    }

    .markdown-body kbd {
      display: inline-block;
      padding: 3px 5px;
      font: 11px SFMono-Regular,Consolas,Liberation Mono,Menlo,monospace;
      line-height: 10px;
      color: #444d56;
      vertical-align: middle;
      background-color: #fafbfc;
      border: 1px solid #d1d5da;
      border-radius: 3px;
      box-shadow: inset 0 -1px 0 #d1d5da;
    }

    .markdown-body h1,
    .markdown-body h2,
    .markdown-body h3,
    .markdown-body h4,
    .markdown-body h5,
    .markdown-body h6 {
      margin-top: 0;
      margin-bottom: 0;
    }

    .markdown-body h1 {
      font-size: 32px;
    }

    .markdown-body h1,
    .markdown-body h2 {
      font-weight: 600;
    }

    .markdown-body h2 {
      font-size: 24px;
    }

    .markdown-body h3 {
      font-size: 20px;
    }

    .markdown-body h3,
    .markdown-body h4 {
      font-weight: 600;
    }

    .markdown-body h4 {
      font-size: 16px;
    }

    .markdown-body h5 {
      font-size: 14px;
    }

    .markdown-body h5,
    .markdown-body h6 {
      font-weight: 600;
    }

    .markdown-body h6 {
      font-size: 12px;
    }

    .markdown-body p {
      margin-top: 0;
      margin-bottom: 10px;
    }

    .markdown-body blockquote {
      margin: 0;
    }

    .markdown-body ol,
    .markdown-body ul {
      padding-left: 0;
      margin-top: 0;
      margin-bottom: 0;
    }

    .markdown-body ol ol,
    .markdown-body ul ol {
      list-style-type: lower-roman;
    }

    .markdown-body ol ol ol,
    .markdown-body ol ul ol,
    .markdown-body ul ol ol,
    .markdown-body ul ul ol {
      list-style-type: lower-alpha;
    }

    .markdown-body dd {
      margin-left: 0;
    }

    .markdown-body code,
    .markdown-body pre {
      font-family: SFMono-Regular,Consolas,Liberation Mono,Menlo,monospace;
      font-size: 12px;
    }

    .markdown-body pre {
      margin-top: 0;
      margin-bottom: 0;
    }

    .markdown-body input::-webkit-inner-spin-button,
    .markdown-body input::-webkit-outer-spin-button {
      margin: 0;
      -webkit-appearance: none;
      appearance: none;
    }

    .markdown-body :checked+.radio-label {
      position: relative;
      z-index: 1;
      border-color: #0366d6;
    }

    .markdown-body .border {
      border: 1px solid #e1e4e8!important;
    }

    .markdown-body .border-0 {
      border: 0!important;
    }

    .markdown-body .border-bottom {
      border-bottom: 1px solid #e1e4e8!important;
    }

    .markdown-body .rounded-1 {
      border-radius: 3px!important;
    }

    .markdown-body .bg-white {
      background-color: #fff!important;
    }

    .markdown-body .bg-gray-light {
      background-color: #fafbfc!important;
    }

    .markdown-body .text-gray-light {
      color: #6a737d!important;
    }

    .markdown-body .mb-0 {
      margin-bottom: 0!important;
    }

    .markdown-body .my-2 {
      margin-top: 8px!important;
      margin-bottom: 8px!important;
    }

    .markdown-body .pl-0 {
      padding-left: 0!important;
    }

    .markdown-body .py-0 {
      padding-top: 0!important;
      padding-bottom: 0!important;
    }

    .markdown-body .pl-1 {
      padding-left: 4px!important;
    }

    .markdown-body .pl-2 {
      padding-left: 8px!important;
    }

    .markdown-body .py-2 {
      padding-top: 8px!important;
      padding-bottom: 8px!important;
    }

    .markdown-body .pl-3,
    .markdown-body .px-3 {
      padding-left: 16px!important;
    }

    .markdown-body .px-3 {
      padding-right: 16px!important;
    }

    .markdown-body .pl-4 {
      padding-left: 24px!important;
    }

    .markdown-body .pl-5 {
      padding-left: 32px!important;
    }

    .markdown-body .pl-6 {
      padding-left: 40px!important;
    }

    .markdown-body .f6 {
      font-size: 12px!important;
    }

    .markdown-body .lh-condensed {
      line-height: 1.25!important;
    }

    .markdown-body .text-bold {
      font-weight: 600!important;
    }

    .markdown-body .pl-c {
      color: #6a737d;
    }

    .markdown-body .pl-c1,
    .markdown-body .pl-s .pl-v {
      color: #005cc5;
    }

    .markdown-body .pl-e,
    .markdown-body .pl-en {
      color: #6f42c1;
    }

    .markdown-body .pl-s .pl-s1,
    .markdown-body .pl-smi {
      color: #24292e;
    }

    .markdown-body .pl-ent {
      color: #22863a;
    }

    .markdown-body .pl-k {
      color: #d73a49;
    }

    .markdown-body .pl-pds,
    .markdown-body .pl-s,
    .markdown-body .pl-s .pl-pse .pl-s1,
    .markdown-body .pl-sr,
    .markdown-body .pl-sr .pl-cce,
    .markdown-body .pl-sr .pl-sra,
    .markdown-body .pl-sr .pl-sre {
      color: #032f62;
    }

    .markdown-body .pl-smw,
    .markdown-body .pl-v {
      color: #e36209;
    }

    .markdown-body .pl-bu {
      color: #b31d28;
    }

    .markdown-body .pl-ii {
      color: #fafbfc;
      background-color: #b31d28;
    }

    .markdown-body .pl-c2 {
      color: #fafbfc;
      background-color: #d73a49;
    }

    .markdown-body .pl-c2:before {
      content: "^M";
    }

    .markdown-body .pl-sr .pl-cce {
      font-weight: 700;
      color: #22863a;
    }

    .markdown-body .pl-ml {
      color: #735c0f;
    }

    .markdown-body .pl-mh,
    .markdown-body .pl-mh .pl-en,
    .markdown-body .pl-ms {
      font-weight: 700;
      color: #005cc5;
    }

    .markdown-body .pl-mi {
      font-style: italic;
      color: #24292e;
    }

    .markdown-body .pl-mb {
      font-weight: 700;
      color: #24292e;
    }

    .markdown-body .pl-md {
      color: #b31d28;
      background-color: #ffeef0;
    }

    .markdown-body .pl-mi1 {
      color: #22863a;
      background-color: #f0fff4;
    }

    .markdown-body .pl-mc {
      color: #e36209;
      background-color: #ffebda;
    }

    .markdown-body .pl-mi2 {
      color: #f6f8fa;
      background-color: #005cc5;
    }

    .markdown-body .pl-mdr {
      font-weight: 700;
      color: #6f42c1;
    }

    .markdown-body .pl-ba {
      color: #586069;
    }

    .markdown-body .pl-sg {
      color: #959da5;
    }

    .markdown-body .pl-corl {
      text-decoration: underline;
      color: #032f62;
    }

    .markdown-body .mb-0 {
      margin-bottom: 0!important;
    }

    .markdown-body .my-2 {
      margin-bottom: 8px!important;
    }

    .markdown-body .my-2 {
      margin-top: 8px!important;
    }

    .markdown-body .pl-0 {
      padding-left: 0!important;
    }

    .markdown-body .py-0 {
      padding-top: 0!important;
      padding-bottom: 0!important;
    }

    .markdown-body .pl-1 {
      padding-left: 4px!important;
    }

    .markdown-body .pl-2 {
      padding-left: 8px!important;
    }

    .markdown-body .py-2 {
      padding-top: 8px!important;
      padding-bottom: 8px!important;
    }

    .markdown-body .pl-3 {
      padding-left: 16px!important;
    }

    .markdown-body .pl-4 {
      padding-left: 24px!important;
    }

    .markdown-body .pl-5 {
      padding-left: 32px!important;
    }

    .markdown-body .pl-6 {
      padding-left: 40px!important;
    }

    .markdown-body .pl-7 {
      padding-left: 48px!important;
    }

    .markdown-body .pl-8 {
      padding-left: 64px!important;
    }

    .markdown-body .pl-9 {
      padding-left: 80px!important;
    }

    .markdown-body .pl-10 {
      padding-left: 96px!important;
    }

    .markdown-body .pl-11 {
      padding-left: 112px!important;
    }

    .markdown-body .pl-12 {
      padding-left: 128px!important;
    }

    .markdown-body hr {
      border-bottom-color: #eee;
    }

    .markdown-body kbd {
      display: inline-block;
      padding: 3px 5px;
      font: 11px SFMono-Regular,Consolas,Liberation Mono,Menlo,monospace;
      line-height: 10px;
      color: #444d56;
      vertical-align: middle;
      background-color: #fafbfc;
      border: 1px solid #d1d5da;
      border-radius: 3px;
      box-shadow: inset 0 -1px 0 #d1d5da;
    }

    .markdown-body:after,
    .markdown-body:before {
      display: table;
      content: "";
    }

    .markdown-body:after {
      clear: both;
    }

    .markdown-body>:first-child {
      margin-top: 0!important;
    }

    .markdown-body>:last-child {
      margin-bottom: 0!important;
    }

    .markdown-body a:not([href]) {
      color: inherit;
      text-decoration: none;
    }

    .markdown-body blockquote,
    .markdown-body details,
    .markdown-body dl,
    .markdown-body ol,
    .markdown-body p,
    .markdown-body pre,
    .markdown-body table,
    .markdown-body ul {
      margin-top: 0;
      margin-bottom: 16px;
    }

    .markdown-body hr {
      height: .25em;
      padding: 0;
      margin: 24px 0;
      background-color: #e1e4e8;
      border: 0;
    }

    .markdown-body blockquote {
      padding: 0 1em;
      color: #6a737d;
      border-left: .25em solid #dfe2e5;
    }

    .markdown-body blockquote>:first-child {
      margin-top: 0;
    }

    .markdown-body blockquote>:last-child {
      margin-bottom: 0;
    }

    .markdown-body h1,
    .markdown-body h2,
    .markdown-body h3,
    .markdown-body h4,
    .markdown-body h5,
    .markdown-body h6 {
      margin-top: 24px;
      margin-bottom: 16px;
      font-weight: 600;
      line-height: 1.25;
    }

    .markdown-body h1 {
      font-size: 2em;
    }

    .markdown-body h1,
    .markdown-body h2 {
      padding-bottom: .3em;
      border-bottom: 1px solid #eaecef;
    }

    .markdown-body h2 {
      font-size: 1.5em;
    }

    .markdown-body h3 {
      font-size: 1.25em;
    }

    .markdown-body h4 {
      font-size: 1em;
    }

    .markdown-body h5 {
      font-size: .875em;
    }

    .markdown-body h6 {
      font-size: .85em;
      color: #6a737d;
    }

    .markdown-body ol,
    .markdown-body ul {
      padding-left: 2em;
    }

    .markdown-body ol ol,
    .markdown-body ol ul,
    .markdown-body ul ol,
    .markdown-body ul ul {
      margin-top: 0;
      margin-bottom: 0;
    }

    .markdown-body li {
      word-wrap: break-all;
    }

    .markdown-body li>p {
      margin-top: 16px;
    }

    .markdown-body li+li {
      margin-top: .25em;
    }

    .markdown-body dl {
      padding: 0;
    }

    .markdown-body dl dt {
      padding: 0;
      margin-top: 16px;
      font-size: 1em;
      font-style: italic;
      font-weight: 600;
    }

    .markdown-body dl dd {
      padding: 0 16px;
      margin-bottom: 16px;
    }

    .markdown-body table {
      display: block;
      width: 100%;
      overflow: auto;
    }

    .markdown-body table th {
      font-weight: 600;
    }

    .markdown-body table td,
    .markdown-body table th {
      padding: 6px 13px;
      border: 1px solid #dfe2e5;
    }

    .markdown-body table tr {
      background-color: #fff;
      border-top: 1px solid #c6cbd1;
    }

    .markdown-body table tr:nth-child(2n) {
      background-color: #f6f8fa;
    }

    .markdown-body img {
      max-width: 100%;
      box-sizing: initial;
      background-color: #fff;
    }

    .markdown-body img[align=right] {
      padding-left: 20px;
    }

    .markdown-body img[align=left] {
      padding-right: 20px;
    }

    .markdown-body code {
      padding: .2em .4em;
      margin: 0;
      font-size: 85%;
      background-color: rgba(27,31,35,.05);
      border-radius: 3px;
    }

    .markdown-body pre {
      word-wrap: normal;
    }

    .markdown-body pre>code {
      padding: 0;
      margin: 0;
      font-size: 100%;
      word-break: normal;
      white-space: pre;
      background: transparent;
      border: 0;
    }

    .markdown-body .highlight {
      margin-bottom: 16px;
    }

    .markdown-body .highlight pre {
      margin-bottom: 0;
      word-break: normal;
    }

    .markdown-body .highlight pre,
    .markdown-body pre {
      padding: 16px;
      overflow: auto;
      font-size: 85%;
      line-height: 1.45;
      background-color: #f6f8fa;
      border-radius: 3px;
    }

    .markdown-body pre code {
      display: inline;
      max-width: auto;
      padding: 0;
      margin: 0;
      overflow: visible;
      line-height: inherit;
      word-wrap: normal;
      background-color: initial;
      border: 0;
    }

    .markdown-body .commit-tease-sha {
      display: inline-block;
      font-family: SFMono-Regular,Consolas,Liberation Mono,Menlo,monospace;
      font-size: 90%;
      color: #444d56;
    }

    .markdown-body .full-commit .btn-outline:not(:disabled):hover {
      color: #005cc5;
      border-color: #005cc5;
    }

    .markdown-body .blob-wrapper {
      overflow-x: auto;
      overflow-y: hidden;
    }

    .markdown-body .blob-wrapper-embedded {
      max-height: 240px;
      overflow-y: auto;
    }

    .markdown-body .blob-num {
      width: 1%;
      min-width: 50px;
      padding-right: 10px;
      padding-left: 10px;
      font-family: SFMono-Regular,Consolas,Liberation Mono,Menlo,monospace;
      font-size: 12px;
      line-height: 20px;
      color: rgba(27,31,35,.3);
      text-align: right;
      white-space: nowrap;
      vertical-align: top;
      cursor: pointer;
      -webkit-user-select: none;
      -moz-user-select: none;
      -ms-user-select: none;
      user-select: none;
    }

    .markdown-body .blob-num:hover {
      color: rgba(27,31,35,.6);
    }

    .markdown-body .blob-num:before {
      content: attr(data-line-number);
    }

    .markdown-body .blob-code {
      position: relative;
      padding-right: 10px;
      padding-left: 10px;
      line-height: 20px;
      vertical-align: top;
    }

    .markdown-body .blob-code-inner {
      overflow: visible;
      font-family: SFMono-Regular,Consolas,Liberation Mono,Menlo,monospace;
      font-size: 12px;
      color: #24292e;
      word-wrap: normal;
      white-space: pre;
    }

    .markdown-body .pl-token.active,
    .markdown-body .pl-token:hover {
      cursor: pointer;
      background: #ffea7f;
    }

    .markdown-body .tab-size[data-tab-size="1"] {
      -moz-tab-size: 1;
      tab-size: 1;
    }

    .markdown-body .tab-size[data-tab-size="2"] {
      -moz-tab-size: 2;
      tab-size: 2;
    }

    .markdown-body .tab-size[data-tab-size="3"] {
      -moz-tab-size: 3;
      tab-size: 3;
    }

    .markdown-body .tab-size[data-tab-size="4"] {
      -moz-tab-size: 4;
      tab-size: 4;
    }

    .markdown-body .tab-size[data-tab-size="5"] {
      -moz-tab-size: 5;
      tab-size: 5;
    }

    .markdown-body .tab-size[data-tab-size="6"] {
      -moz-tab-size: 6;
      tab-size: 6;
    }

    .markdown-body .tab-size[data-tab-size="7"] {
      -moz-tab-size: 7;
      tab-size: 7;
    }

    .markdown-body .tab-size[data-tab-size="8"] {
      -moz-tab-size: 8;
      tab-size: 8;
    }

    .markdown-body .tab-size[data-tab-size="9"] {
      -moz-tab-size: 9;
      tab-size: 9;
    }

    .markdown-body .tab-size[data-tab-size="10"] {
      -moz-tab-size: 10;
      tab-size: 10;
    }

    .markdown-body .tab-size[data-tab-size="11"] {
      -moz-tab-size: 11;
      tab-size: 11;
    }

    .markdown-body .tab-size[data-tab-size="12"] {
      -moz-tab-size: 12;
      tab-size: 12;
    }

    .markdown-body .task-list-item {
      list-style-type: none;
    }

    .markdown-body .task-list-item+.task-list-item {
      margin-top: 3px;
    }

    .markdown-body .task-list-item input {
      margin: 0 .2em .25em -1.6em;
      vertical-align: middle;
    }
"""

########################################################################
# pygments_css
########################################################################

pygments_css = \
    pygments.formatters.HtmlFormatter().get_style_defs('.highlight')

########################################################################
# nb_css
########################################################################

nb_css=r"""

    html, body {
        overflow : hidden;
        height : 100%;
    }

    #outer_container {
        position : absolute;
        top      : 0px;
        bottom   : 0px;
        left     : 0px;
        right    : 0px;
        padding  : 12px;
        overflow : auto;
    }

    .xcell {
        margin-bottom    : 12px;
        padding          : 10px;
        border           : 1px solid #888;
        background-color : #ccc;
    }

    .xmd {
        background-color : initial;
        border           : none;
        padding          : 0px;
    }

    xpre {
        font-size        : 12px;
        font-family      : "MesloLGS Nerd Font", "Menlo", "Lucida Console", Monaco, monospace;
    }
"""

########################################################################
# nb_head_js
########################################################################

nb_head_js = r"""function update_cells(data) {

    let id_dict = {};
    for (const d of data) {
        id_dict[d[0]] = d;
    }

    let container = document.getElementById("container");
    let cell_nodes = container.childNodes;

    let current_ids = {};
    let bad_cells = [];
    for (let i = 0; i < cell_nodes.length; i++) {
        if (cell_nodes[i].id in id_dict) {
            current_ids[cell_nodes[i].id] = cell_nodes[i];
        } else {
            bad_cells.push(cell_nodes[i]);
        }
    }
    for (const b of bad_cells) {
        container.removeChild(b);
    }

    let current_sort_order = [];
    for (const d of data) {
        if (d[0] in current_ids) {
            current_sort_order.push([d[0], current_ids[d[0]]]);
        }
    }
    for (let i = 0; i < cell_nodes.length; i++) {
        if (cell_nodes[i].id != current_sort_order[i][0]) {
            container.insertBefore(
                current_sort_order[i][1],
                cell_nodes[i]
            );
            
        }
    }

    for (let i = 0; i < data.length; i++) {
        if (i < cell_nodes.length) {
            if (cell_nodes[i].id != data[i][0]) {
                const new_cell = document.createElement("div");
                new_cell.id = data[i][0];
                new_cell.classList.add("cell");
                new_cell.classList.add(data[i][1]);
                new_cell.innerHTML = data[i][2];
                container.insertBefore(new_cell, cell_nodes[i]);
            }
        } else {
            const new_cell = document.createElement("div");
            new_cell.id = data[i][0];
            new_cell.classList.add("cell");
            new_cell.classList.add(data[i][1]);
            new_cell.innerHTML = data[i][2];
            container.appendChild(new_cell);
        }
    }

    MathJax.typeset();

};"""

########################################################################
# nb_head_html
########################################################################

nb_head_html=rf"""<!doctype html>
<html lang="en">
<meta charset="utf-8">
<style>
{github_markdown_css}
{pygments_css}
{nb_css}
</style>
<script src="https://polyfill.io/v3/polyfill.min.js?features=es6"></script>
<script type="text/javascript" id="MathJax-script" async
  src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-chtml.js">
</script>
<script>
{nb_head_js}
</script>
<div id="outer_container">
<div id="container" class="markdown-body">
</div>
<br><br><br><br><br><br><br><br><br><br>
"""

########################################################################
# main
########################################################################

if __name__ == '__main__':
    ViewerApp.run()
