"########################################################################
"########################################################################
"##
"## GENERAL OPTIONS
"##
"########################################################################
"########################################################################

set nocompatible                  "Use vim, not vi
set directory^=$HOME/.vim/swap//  "Put all swap files together in one place
set textwidth=79                  "Break lines after 79 chars
set formatoptions+=l              "But do not brake a line if it was long
set shiftwidth=4                  "Indent using four spaces
set softtabstop=4
set expandtab                     "Use only spaces
set ignorecase                    "Search is often case insensitive
set smartcase                     "Search is sometimes case sensitive
set autoindent                    "Use the same indent as in previous line
set ruler                         "Show ruler (position)
set visualbell                    "Do not beep
set showmatch                     "Match brackets
set whichwrap=<,>,[,],b,s         "Left/Right keys moves to next line
set backspace=indent,eol,start    "Delete/Backspace goes to previous line
set modeline                      "Check modelines in files (things like // vim: .. //)
set title                         "Show information about vi the terminal's titlebar
set incsearch                     "Use incremental search
set hlsearch                      "Hilight search results
set mouse=a                       "Enable mouse ('a' stands for all)
set ttymouse=xterm2               "Enalbe resizing splits with mouse
set mousemodel=popup              "Right click gives a menu
set nowrap                        "Do no wrap lines
set nojoinspaces                  "Join command should not add 2 spaces after .
set wildmenu                      "Nice menu for completing commands
set spelllang=en_us,math          "Default dictionary
set confirm                       "Ask before quitting if there are changes
set hidden                        "Allow `unsaved` buffers
if v:version >= 802
set completeopt=menuone,noselect  "More normal completions
endif
set guioptions-=r                 "No scrollbar on gui
set scrolloff=1                   "Show one line above/below cursor
set sidescrolloff=5               "Show 5 colomuns left/right of cursor
set fillchars=vert:│,fold:\       "Fill fold lines with spaces
set list
set listchars=tab:--›,nbsp:·
"et number                        "Show line numbers
"et signcolumn=number             "Show signs in number column
"et foldcolumn=1                  "Show fold column
"et fillchars=stl:─,stlnc:─,vert:│,fold:\              "Fill fold lines with spaces
"et statusline=─
"et laststatus=0
"et undofile                      "Persistent undo
"et undodir=$HOME/.vim/vimundo    "Directory for persistent undo

"########################################################################
"########################################################################
"##
"## PLUGINS
"##
"########################################################################
"########################################################################

"Install vim-plug if needed

if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
        \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

"After changing this list, restart vim and run command :PlugInstall

call plug#begin('~/.vim/bundle')

    "Global plugins
    Plug 'chriskempson/base16-vim'
    Plug 'ConradIrwin/vim-bracketed-paste'
    Plug 'ervandew/supertab'
    if empty($INSUDOEDIT) && v:version >= 802
        Plug 'SirVer/ultisnips'
    endif
    Plug 'godlygeek/tabular'
    Plug 'tpope/vim-commentary'
    Plug 'suy/vim-context-commentstring'
    Plug 'christoomey/vim-tmux-navigator'
    Plug 'vim-utils/vim-man'
    Plug 'rkitover/vimpager'
    Plug 'preservim/nerdtree'
    Plug 'majutsushi/tagbar'
    Plug 'mbbill/undotree'
    Plug 'chrisbra/unicode.vim'
    Plug 'ntpeters/vim-better-whitespace'

    " Polyglot
    let g:polyglot_disabled = ['sensible', 'autoindent']
    Plug 'sheerun/vim-polyglot'

    "Filetype plugins
    " Plug 'dense-analysis/ale',                  { 'for': ['python', 'php'] }
    " Plug 'hdima/python-syntax',                 { 'for': 'python' }
    " Plug 'hynek/vim-python-pep8-indent',        { 'for': 'python' }
    " Plug 'octol/vim-cpp-enhanced-highlight',    { 'for': 'cpp' }
    " Plug 'JulesWang/css.vim',                   { 'for': 'css' }
    " 'lug 'othree/html5.vim',                    { 'for': 'html' }
    " Plug 'pangloss/vim-javascript',             { 'for': 'javascript' }
    " Plug 'StanAngeloff/php.vim',                { 'for': 'php' }
    " Plug 'aaronj1335/underscore-templates.vim', { 'for': 'mtpl' }
    " Plug 'Glench/Vim-Jinja2-Syntax',            { 'for': 'jinja' }
    " 'lug 'ssteffl/lark-syntax.vim'
    Plug 'coreysharris/Macaulay2.vim',          { 'for': 'Macaulay2' }

    "My global plugins
    Plug '~/.vim/myplugins/diff_colors'
    Plug '~/.vim/myplugins/myultisnips'
    if empty($INSUDOEDIT) && v:version >= 802
        Plug '~/.vim/myplugins/tmux_send_keys'
        Plug '~/.vim/myplugins/tmux_clipboard'
    endif

    "My filetype plugins
    if has('mac')
        Plug '~/.vim/myplugins/tex',      { 'for': 'tex' }
    endif
    Plug '~/.vim/myplugins/vert_help',    { 'for': 'help' }
    Plug '~/.vim/myplugins/singular',     { 'for': 'singular' }
    Plug '~/.vim/myplugins/inb',          { 'for': 'inb' }
    Plug '~/.vim/myplugins/css_align',    { 'for': ['css', 'html', 'bib', 'php'] }
    Plug '~/.vim/myplugins/php_fixspell', { 'for': 'php' }
    Plug '~/.vim/myplugins/md',           { 'for': 'markdown' }

call plug#end()

"########################################################################
"########################################################################
"##
"## LOOK AND COLORS
"##
"########################################################################
"########################################################################

if has("mac")
  set t_ts=]1;
  set t_fs=
endif

if &term == "screen-256color"
  set t_ts=]2;
  set t_fs=\
endif

let &t_SI = "\e[5 q"
let &t_EI = "\e[1 q"

function! RoiStatusLine()
    let l:stl = '  '
    if g:actual_curwin == win_getid()
        let l:stl .= '%#RoiStatusLineA#'
        let l:stl .= ''
        let l:stl .= '%#RoiStatusLine#'
        let l:stl .= ' %<%f '
        let l:stl .= '%#RoiStatusLineA#'
        let l:stl .= ''
        let l:stl .= '%#StatusLine#'
    else
        let l:stl .= '  %<%f  '
    endif
    let l:stl .= ' %h%w%m%r'
    let l:stl .= '%='
    "et l:stl .= '%l,%c%V  %P '
    let l:stl .= '%l/%L '

    return l:stl
endfunction

set titlestring=%t%(\ %M%)%(\ (%<%0.50{expand(\"%:p:~:h\")})%)%(\ %a%)\ -\ %{v:servername\ ?\ v:servername\ :\ \"VIM\"}
"et titlestring=%{v:servername\ ?\ v:servername\ :\ \"vim\"}%(\ (%<%0.50{expand(\"%:p:~:h\")})%)
set statusline=%{%RoiStatusLine()%}
"et laststatus=2

if !empty($INSUDOEDIT)
    augroup on_change_colorschema
        autocmd!
        autocmd ColorScheme * hi! Normal ctermbg=235
    augroup END
endif

if !empty($BASE16_THEME)
    let base16colorspace=256
    silent! colorscheme base16-$BASE16_THEME
    if ($BASE16_THEME == "nord")
        hi Comment ctermfg=17
    endif
endif

hi LineNr ctermbg=NONE
hi Folded ctermbg=NONE
hi SignColumn ctermbg=NONE
hi FoldColumn ctermbg=NONE ctermfg=NONE
hi VertSplit ctermbg=NONE ctermfg=18
" hi StatusLine ctermbg=NONE ctermfg=18
" hi StatusLineNC ctermbg=NONE ctermfg=18
hi StatusLine ctermbg=18 ctermfg=20
hi StatusLineNC ctermbg=18 ctermfg=20

" hi RoiStatusLine ctermbg=2 ctermfg=18
" hi RoiStatusLineA ctermbg=18 ctermfg=2

hi RoiStatusLine ctermbg=19 ctermfg=21
hi RoiStatusLineA ctermbg=18 ctermfg=19

hi clear ALEErrorSign
hi clear ALEWarningSign

hi link ALEErrorSign ErrorMsg
hi link ALEWarningSign WarningMsg

let g:ale_sign_error = ' '
let g:ale_sign_warning = ' '

hi clear SpellBad
hi clear SpellCap
hi clear SpellRare
hi clear SpellLocal

hi SpellBad cterm=undercurl ctermfg=9
hi SpellCap cterm=undercurl ctermfg=12
hi SpellRare cterm=undercurl ctermfg=13
hi SpellLocal cterm=undercurl ctermfg=14

hi clear MatchParen

hi MatchParen cterm=underline

"highlight EndOfBuffer ctermfg=bg

"########################################################################
"########################################################################
"##
"## KEYBOARD ADJUSTMENTS
"##
"########################################################################
"########################################################################

command W w
nmap Q <nop>
inoremap <C-A> <C-X>s
map  <silent> <PageDown> @='10j'<CR>
map  <silent> <PageUp> @='10k'<CR>
imap <silent> <PageDown> <C-O><PageDown>
imap <silent> <PageUp> <C-O><PageUp>

" Use <C-L> to clear the highlighting of :set hlsearch.
if maparg('<C-L>', 'n') ==# ''
    nnoremap <silent> <C-L> :nohlsearch<CR><C-L>
endif

nmap <F8> :TagbarToggle<CR>
nmap <F7> :UndotreeToggle<CR>

"########################################################################
"########################################################################
"##
"## NERDTree
"##
"########################################################################
"########################################################################

let NERDTreeNaturalSort = 1
let NERDTreeMinimalUI = 1
let NERDTreeMinimalMenu = 1
let NERDTreeMouseMode = 2
let NERDTreeMapPreview = "<space>"

autocmd StdinReadPre * let s:std_in=1

" Start NERDTree when Vim is started without file arguments.
autocmd VimEnter *
            \ if argc() == 0 && !exists('s:std_in')
                \ | NERDTree
            \ | endif

" Start NERDTree when Vim starts with a directory argument.
autocmd VimEnter *
            \ if argc() == 1 && isdirectory(argv()[0]) && !exists('s:std_in')
                \ | execute 'cd '.argv()[0]
                \ | enew
                \ | NERDTree
            \ | endif

" Exit Vim if NERDTree is the only window remaining in the only tab.
autocmd BufEnter *
            \ if tabpagenr('$') == 1 && winnr('$') == 1
                    \ && exists('b:NERDTree') && b:NERDTree.isTabTree()
                \ | quit
            \ | endif

" Exit Vim after closing NERDTree with only an empy buffer left
" (The code below works, but I don't find it convenient)
" let s:just_left_nt = 0
" autocmd BufHidden *
"             \ if exists('b:NERDTree')
"                 \ | let s:just_left_nt = 1
"             \ | endif
" autocmd BufEnter *
"             \ if s:just_left_nt == 1
"                     \ && !getbufinfo('%')[0].changed
"                     \ && tabpagenr('$') == 1 && winnr('$') == 1
"                     \ && line('$') == 1 && getline(1) == ''
"                 \ | quit
"             \ | endif
"             \ | let s:just_left_nt = 0

autocmd FileType nerdtree setlocal fillchars=vert:│,fold:\ ,eob:\ 
autocmd FileType nerdtree setlocal statusline=\ 

"########################################################################
"########################################################################
"##
"## TMUX NAVIGATOR
"##
"########################################################################
"########################################################################

let g:tmux_navigator_no_mappings=1
nnoremap <silent> <Leader>h :TmuxNavigateLeft<cr>
nnoremap <silent> <Leader>j :TmuxNavigateDown<cr>
nnoremap <silent> <Leader>k :TmuxNavigateUp<cr>
nnoremap <silent> <Leader>l :TmuxNavigateRight<cr>
nnoremap <silent> <c-\>     :TmuxNavigatePrevious<cr>

"########################################################################
"########################################################################
"##
"## PTYHON RELATED
"##
"########################################################################
"########################################################################

autocmd FileType python setlocal completeopt-=preview
let g:UltiSnipsExpandTrigger = "<tab>"
let g:UltiSnipsJumpForwardTrigger = "<tab>"
let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"
let g:python_highlight_space_errors = 0
let g:python_highlight_all = 1
augroup filetypedetect
    au! BufRead,BufNewFile *.sage,*.spyx,*.pyx setfiletype python
augroup END

"########################################################################
"########################################################################
"##
"## MISC
"##
"########################################################################
"########################################################################

let g:is_bash = 1        "avoid funny-looking syntax errors with advanced bash scripts
let g:sh_no_error = 1    "also for bash
let filetype_m = "mma"   "files with .m extension are Mathematica files
let g:tex_flavor='latex'
let g:cpp_class_scope_highlight = 1
autocmd FileType php setlocal commentstring=#\ %s
