
# basic stuff
set -g default-terminal "screen-256color"
set -g base-index 1
set -g pane-base-index 1
set -s escape-time 1
set -g default-command "bash"

# mouse
set -g mouse on

# copy and paste
set -g set-clipboard on
set -g mode-keys vi
bind -T copy-mode-vi Enter send-keys -X copy-selection-no-clear
bind -T copy-mode-vi Y send-keys -X copy-selection-no-clear
bind -T copy-mode-vi y send-keys -X copy-selection-no-clear
bind -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-selection-no-clear
bind -T root DoubleClick1Pane {
    if-shell -Ft= "#{mouse_any_flag}" {
        send-keys -M
    } {
        if -Ft= "#{pane_in_mode}" {
            send-keys -M
        } {
            copy-mode -t=
            send-keys -X begin-selection
            send-keys -X rectangle-toggle
            send-keys -X previous-word
            send-keys -X other-end
            send-keys -X next-space-end
        }
    }
}

# pane titles
set -g set-titles on
set -g set-titles-string "#T"

# key bindings

unbind C-b
set -g prefix å
set -g prefix2 C-Space

bind -n M-Left  select-pane -L
bind -n M-Right select-pane -R
bind -n M-Up    select-pane -U
bind -n M-Down  select-pane -D

set -s @go {
    set -e
    function action() {
        if ps -o state= -o comm= -t "$(tmux display-message -p '#{pane_tty}')" | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|l?n?vim?x?)(diff)?$'
        # if tmux display-message -p '#{pane_current_command}' | grep -iq vim
        then
            # tmux display-message "#{pane_tty} vim"
            tmux send-keys $1
        else
            # tmux display-message "#{pane_tty} not vim"
            tmux select-pane "$2"
        fi
    }
    action \
}

bind -n M-Left  run '#{@go} "Escape \\ h" -L'
bind -n M-Right run '#{@go} "Escape \\ l" -R'
bind -n M-Up    run '#{@go} "Escape \\ k" -U'
bind -n M-Down  run '#{@go} "Escape \\ j" -D'
#bind -n M-\     run '#{@go} "C-\\" -l'

set -s @swap {
    set -e
    function action() {
        tmux select-pane -m
        tmux select-pane -Z "$@"
        tmux swap-pane -dZ
        tmux select-pane -M
    }
    action \
}

bind -n M-S-Left  run '#{@swap} -L'
bind -n M-S-Right run '#{@swap} -R'
bind -n M-S-Up    run '#{@swap} -U'
bind -n M-S-Down  run '#{@swap} -D'

bind Space split-window -h -c '#{pane_current_path}'
bind C-Space split-window -c '#{pane_current_path}'

set -s @newpane {
    set -e
    function action() {
        [ "x$1" = "xhorizontal"   ] && SPLIT_ARG="-h"
        [ "x$2" = "xbefore"       ] && DIRECTION_ARG="-b"
        [ "x$3" = "xcheck_vim"    ] && CHECK_VIM="yes"
        [ "x$3" = "xinherit_env"  ] && INHERIT_ENV="yes"
        
        if [ "$CHECK_VIM" ]
        then
            if ps -o state= -o comm= -t "$(tmux display-message -p '#{pane_tty}')" | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|l?n?vim?x?)(diff)?$'
            # if tmux display-message -p '#{pane_current_command}' | grep -iq vim
            then
                if [ "$SPLIT_ARG" ]; then
                    tmux send-keys C-w v C-w l
                else
                    tmux send-keys C-w s C-w j
                fi
                return
            fi
        fi

        if [ "$INHERIT_ENV" ]
        then
            PARENT_PANE_PID=`tmux display -p '#{pane_pid}'`
            PARENT_PANE_PWD=`tmux display -p '#{pane_current_path}'`
            tmux split-window \
                $SPLIT_ARG $DIRECTION_ARG -c "$PARENT_PANE_PWD" \
                "_tmux_duplicate_env $PARENT_PANE_PID"
            return
        fi

        tmux split-window $SPLIT_ARG $DIRECTION_ARG -c '#{pane_current_path}'
    }
    action \
}

bind -n M-e run '#{@newpane} horizontal after  default'
bind -n M-E run '#{@newpane} vertical   after  default'
bind -n M-d run '#{@newpane} horizontal after  inherit_env'
bind -n M-D run '#{@newpane} vertical   after  inherit_env'
bind -n M-s run '#{@newpane} horizontal before default'
bind -n M-S run '#{@newpane} vertical   before default'
bind -n M-f run '#{@newpane} horizontal after  check_vim'
bind -n M-F run '#{@newpane} vertical   after  check_vim'

bind -n M-t run-shell "tmux new-window -t +1 || tmux next-window"
bind -n M-Tab last-pane

bind -r Left  resize-pane -L
bind -r Right resize-pane -R
bind -r Up    resize-pane -U
bind -r Down  resize-pane -D

bind -n M-z resize-pane -Z
bind -n Ω resize-pane -Z
bind Ω resize-pane -Z

bind 1 run "tmux select-window -t :1 || tmux new-window -t :1"
bind 2 run "tmux select-window -t :2 || tmux new-window -t :2"
bind 3 run "tmux select-window -t :3 || tmux new-window -t :3"
bind 4 run "tmux select-window -t :4 || tmux new-window -t :4"
bind 5 run "tmux select-window -t :5 || tmux new-window -t :5"
bind 6 run "tmux select-window -t :6 || tmux new-window -t :6"
bind 7 run "tmux select-window -t :7 || tmux new-window -t :7"
bind 8 run "tmux select-window -t :8 || tmux new-window -t :8"
bind 9 run "tmux select-window -t :9 || tmux new-window -t :9"

bind -n M-1 run "tmux select-window -t :1 || tmux new-window -t :1"
bind -n M-2 run "tmux select-window -t :2 || tmux new-window -t :2"
bind -n M-3 run "tmux select-window -t :3 || tmux new-window -t :3"
bind -n M-4 run "tmux select-window -t :4 || tmux new-window -t :4"
bind -n M-5 run "tmux select-window -t :5 || tmux new-window -t :5"
bind -n M-6 run "tmux select-window -t :6 || tmux new-window -t :6"
bind -n M-7 run "tmux select-window -t :7 || tmux new-window -t :7"
bind -n M-8 run "tmux select-window -t :8 || tmux new-window -t :8"
bind -n M-9 run "tmux select-window -t :9 || tmux new-window -t :9"

bind 0 run "tmux new-window -t :0 'htop' || tmux select-window -t :0"
bind -n M-0 run "tmux new-window -t :0 'htop' || tmux select-window -t :0"

# TODO:
# run-shell ~/Dropbox/Config/tmux-scroll-copy-mode/scroll_copy_mode.tmux

# nice powerline

run {

    function st() {
        tmux set -g "$@"
    }

    C_REGULAR_FG="colour21"
    C_REGULAR_BG="colour19"

    C_LIGHTER_FG="colour20"
    C_LIGHTER_BG="colour18"

    C_SPECIAL_FG="colour18"
    C_SPECIAL_BG="colour2"

    CR="##[fg=$C_REGULAR_FG bg=$C_REGULAR_BG]"
    CS="##[fg=$C_SPECIAL_FG bg=$C_SPECIAL_BG]"
    CL="##[fg=$C_LIGHTER_FG bg=$C_LIGHTER_BG]"
    CI="##[fg=$C_LIGHTER_BG bg=$C_LIGHTER_BG]"

    CRL="##[fg=$C_REGULAR_BG bg=$C_LIGHTER_BG nobold nounderscore noitalics]"
    CSR="##[fg=$C_SPECIAL_BG bg=$C_REGULAR_BG nobold nounderscore noitalics]"
    CRS="##[fg=$C_REGULAR_BG bg=$C_SPECIAL_BG nobold nounderscore noitalics]"
    CLS="##[fg=$C_LIGHTER_BG bg=$C_SPECIAL_BG nobold nounderscore noitalics]"
    CSL="##[fg=$C_SPECIAL_BG bg=$C_LIGHTER_BG nobold nounderscore noitalics]"

    SL=$'\356\202\260' # \uE0B0 
    AL=$'\356\202\261' # \uE0B1 
    SR=$'\356\202\262' # \uE0B2 
    AR=$'\356\202\263' # \uE0B2 

    if [ -z "$TMUX_HOSTNAME" ]; then
        TMUX_HOSTNAME="$USER@$(hostname -s)"
    fi

    st pane-active-border-style "fg=$C_LIGHTER_BG"
    st pane-border-style "fg=$C_LIGHTER_BG"
    st pane-border-status 'off'

    # st pane-active-border-style "fg=$C_LIGHTER_BG,bg=$C_LIGHTER_BG"
    # st pane-border-style "fg=$C_LIGHTER_BG,bg=$C_LIGHTER_BG"
    # st pane-border-format "##[align=left]$CL ##{pane_index}  ##{pane_title} "
    # st pane-border-status 'top'

    # status line: left (clock)
    S=""
    S="$S##[align=left range=left]"
    S="$S$CR %H:%M "
    S="$S##[norange]"

    # status line: middle (window list)
    S="$S##[list=on align=left]"
    S="$S##[list=left-marker]<"
    S="$S##[list=right-marker]>"
    S="$S##[list=on]"
    S="$S$CRL"
    S="$S##{W:"
        S="$S##[range=window|##{window_index}]"
        S="$S$SL$CL"
        S="$S ##I##{?##{==:##{window_name},bash},,:##W} $CI"
        S="$S##[norange]"
    S="$S,"
        S="$S##[range=window|##{window_index} list=focus]"
        S="$S##{?window_start_flag,$CRS,$CLS}$SL$CS"
        S="$S ##I##{?##{==:##{window_name},bash},,:##W} $CSL"
        S="$S##[norange]"
    S="$S}"
    S="$S$SL"

    # status line: right (pane title, env, host)
    S="$S##[nolist align=right range=right]"
    S="$S$CRL$SR$CR ##{pane_title} "
    S="$S$CSR$SR$CS ##S "
    S="$S$CRS$SR$CR $TMUX_HOSTNAME "
    S="$S##[norange]"

    st status 'on'
    st status-style "fg=$C_LIGHTER_FG bg=$C_LIGHTER_BG"
    st status-format[0] "$S"

    # st status-bg "$C_LIGHTER_BG"
    # st status-right-length '100'
    # st status-right "$CRL$SR$CR ##{pane_title} $CSR$SR$CS ##S $CRS$SR$CR $TMUX_HOSTNAME "
    # st status-left "$CR %H:%M $CRL$SL"

    # st window-status-separator ''
    # st window-status-format "$CL ##I  ##W "
    # st window-status-current-format "$CLS$SL$CS ##I  ##W $CSL$SL"
}

# vi: ft=tmux
